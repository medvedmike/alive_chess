// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alivechess2.proto

package vsu.alivechess.net.commands;

public final class AliveChessProtos {
  private AliveChessProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum ResourceTypes
      implements com.google.protobuf.ProtocolMessageEnum {
    rCoal(0, 0),
    rGold(1, 1),
    rIron(2, 2),
    rStone(3, 3),
    rWood(4, 4),
    ;
    
    public static final int rCoal_VALUE = 0;
    public static final int rGold_VALUE = 1;
    public static final int rIron_VALUE = 2;
    public static final int rStone_VALUE = 3;
    public static final int rWood_VALUE = 4;
    
    
    public final int getNumber() { return value; }
    
    public static ResourceTypes valueOf(int value) {
      switch (value) {
        case 0: return rCoal;
        case 1: return rGold;
        case 2: return rIron;
        case 3: return rStone;
        case 4: return rWood;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<ResourceTypes>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ResourceTypes>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ResourceTypes>() {
            public ResourceTypes findValueByNumber(int number) {
              return ResourceTypes.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final ResourceTypes[] VALUES = {
      rCoal, rGold, rIron, rStone, rWood, 
    };
    
    public static ResourceTypes valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private ResourceTypes(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:tutorial.ResourceTypes)
  }
  
  public enum LandscapeTypes
      implements com.google.protobuf.ProtocolMessageEnum {
    None(0, 0),
    Grass(1, 1),
    Ground(2, 2),
    Snow(3, 3),
    ;
    
    public static final int None_VALUE = 0;
    public static final int Grass_VALUE = 1;
    public static final int Ground_VALUE = 2;
    public static final int Snow_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static LandscapeTypes valueOf(int value) {
      switch (value) {
        case 0: return None;
        case 1: return Grass;
        case 2: return Ground;
        case 3: return Snow;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<LandscapeTypes>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LandscapeTypes>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LandscapeTypes>() {
            public LandscapeTypes findValueByNumber(int number) {
              return LandscapeTypes.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final LandscapeTypes[] VALUES = {
      None, Grass, Ground, Snow, 
    };
    
    public static LandscapeTypes valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private LandscapeTypes(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:tutorial.LandscapeTypes)
  }
  
  public enum PointTypes
      implements com.google.protobuf.ProtocolMessageEnum {
    pNone(0, 0),
    pKing(1, 1),
    pCastle(2, 2),
    pMine(3, 3),
    pResource(4, 4),
    pSingleObject(5, 5),
    pMultyObject(6, 6),
    pLandscape(7, 7),
    ;
    
    public static final int pNone_VALUE = 0;
    public static final int pKing_VALUE = 1;
    public static final int pCastle_VALUE = 2;
    public static final int pMine_VALUE = 3;
    public static final int pResource_VALUE = 4;
    public static final int pSingleObject_VALUE = 5;
    public static final int pMultyObject_VALUE = 6;
    public static final int pLandscape_VALUE = 7;
    
    
    public final int getNumber() { return value; }
    
    public static PointTypes valueOf(int value) {
      switch (value) {
        case 0: return pNone;
        case 1: return pKing;
        case 2: return pCastle;
        case 3: return pMine;
        case 4: return pResource;
        case 5: return pSingleObject;
        case 6: return pMultyObject;
        case 7: return pLandscape;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<PointTypes>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PointTypes>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PointTypes>() {
            public PointTypes findValueByNumber(int number) {
              return PointTypes.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final PointTypes[] VALUES = {
      pNone, pKing, pCastle, pMine, pResource, pSingleObject, pMultyObject, pLandscape, 
    };
    
    public static PointTypes valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private PointTypes(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:tutorial.PointTypes)
  }
  
  public enum SingleObjectType
      implements com.google.protobuf.ProtocolMessageEnum {
    Tree(0, 0),
    Obstacle(1, 1),
    ;
    
    public static final int Tree_VALUE = 0;
    public static final int Obstacle_VALUE = 1;
    
    
    public final int getNumber() { return value; }
    
    public static SingleObjectType valueOf(int value) {
      switch (value) {
        case 0: return Tree;
        case 1: return Obstacle;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SingleObjectType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SingleObjectType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SingleObjectType>() {
            public SingleObjectType findValueByNumber(int number) {
              return SingleObjectType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final SingleObjectType[] VALUES = {
      Tree, Obstacle, 
    };
    
    public static SingleObjectType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private SingleObjectType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:tutorial.SingleObjectType)
  }
  
  public enum MultyObjectTypes
      implements com.google.protobuf.ProtocolMessageEnum {
    Rock(0, 0),
    ;
    
    public static final int Rock_VALUE = 0;
    
    
    public final int getNumber() { return value; }
    
    public static MultyObjectTypes valueOf(int value) {
      switch (value) {
        case 0: return Rock;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<MultyObjectTypes>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MultyObjectTypes>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MultyObjectTypes>() {
            public MultyObjectTypes findValueByNumber(int number) {
              return MultyObjectTypes.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.getDescriptor().getEnumTypes().get(4);
    }
    
    private static final MultyObjectTypes[] VALUES = {
      Rock, 
    };
    
    public static MultyObjectTypes valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private MultyObjectTypes(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:tutorial.MultyObjectTypes)
  }
  
  public enum UpdateType
      implements com.google.protobuf.ProtocolMessageEnum {
    KingMove(0, 0),
    KingAppear(1, 1),
    KingDisappear(2, 2),
    ResourceDisappear(3, 3),
    ;
    
    public static final int KingMove_VALUE = 0;
    public static final int KingAppear_VALUE = 1;
    public static final int KingDisappear_VALUE = 2;
    public static final int ResourceDisappear_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static UpdateType valueOf(int value) {
      switch (value) {
        case 0: return KingMove;
        case 1: return KingAppear;
        case 2: return KingDisappear;
        case 3: return ResourceDisappear;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<UpdateType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<UpdateType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<UpdateType>() {
            public UpdateType findValueByNumber(int number) {
              return UpdateType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.getDescriptor().getEnumTypes().get(5);
    }
    
    private static final UpdateType[] VALUES = {
      KingMove, KingAppear, KingDisappear, ResourceDisappear, 
    };
    
    public static UpdateType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private UpdateType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:tutorial.UpdateType)
  }
  
  public interface ErrorMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string message = 1;
    boolean hasMessage();
    String getMessage();
  }
  public static final class ErrorMessage extends
      com.google.protobuf.GeneratedMessage
      implements ErrorMessageOrBuilder {
    // Use ErrorMessage.newBuilder() to construct.
    private ErrorMessage(Builder builder) {
      super(builder);
    }
    private ErrorMessage(boolean noInit) {}
    
    private static final ErrorMessage defaultInstance;
    public static ErrorMessage getDefaultInstance() {
      return defaultInstance;
    }
    
    public ErrorMessage getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ErrorMessage_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ErrorMessage_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string message = 1;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ErrorMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ErrorMessage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ErrorMessage_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage build() {
        vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage result = new vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMessage()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              message_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string message = 1;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.ErrorMessage)
    }
    
    static {
      defaultInstance = new ErrorMessage(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ErrorMessage)
  }
  
  public interface RegisterRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string login = 1;
    boolean hasLogin();
    String getLogin();
    
    // required string password = 2;
    boolean hasPassword();
    String getPassword();
  }
  public static final class RegisterRequest extends
      com.google.protobuf.GeneratedMessage
      implements RegisterRequestOrBuilder {
    // Use RegisterRequest.newBuilder() to construct.
    private RegisterRequest(Builder builder) {
      super(builder);
    }
    private RegisterRequest(boolean noInit) {}
    
    private static final RegisterRequest defaultInstance;
    public static RegisterRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public RegisterRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string login = 1;
    public static final int LOGIN_FIELD_NUMBER = 1;
    private java.lang.Object login_;
    public boolean hasLogin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getLogin() {
      java.lang.Object ref = login_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          login_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getLoginBytes() {
      java.lang.Object ref = login_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        login_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required string password = 2;
    public static final int PASSWORD_FIELD_NUMBER = 2;
    private java.lang.Object password_;
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          password_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      login_ = "";
      password_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasLogin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPassword()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLoginBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPasswordBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLoginBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPasswordBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.RegisterRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        login_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest result = new vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.login_ = login_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.password_ = password_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest.getDefaultInstance()) return this;
        if (other.hasLogin()) {
          setLogin(other.getLogin());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasLogin()) {
          
          return false;
        }
        if (!hasPassword()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              login_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              password_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string login = 1;
      private java.lang.Object login_ = "";
      public boolean hasLogin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getLogin() {
        java.lang.Object ref = login_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          login_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setLogin(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        login_ = value;
        onChanged();
        return this;
      }
      public Builder clearLogin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        login_ = getDefaultInstance().getLogin();
        onChanged();
        return this;
      }
      void setLogin(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        login_ = value;
        onChanged();
      }
      
      // required string password = 2;
      private java.lang.Object password_ = "";
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPassword(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
        return this;
      }
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      void setPassword(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.RegisterRequest)
    }
    
    static {
      defaultInstance = new RegisterRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.RegisterRequest)
  }
  
  public interface RegisterResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required bool isSuccessed = 1;
    boolean hasIsSuccessed();
    boolean getIsSuccessed();
  }
  public static final class RegisterResponse extends
      com.google.protobuf.GeneratedMessage
      implements RegisterResponseOrBuilder {
    // Use RegisterResponse.newBuilder() to construct.
    private RegisterResponse(Builder builder) {
      super(builder);
    }
    private RegisterResponse(boolean noInit) {}
    
    private static final RegisterResponse defaultInstance;
    public static RegisterResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public RegisterResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required bool isSuccessed = 1;
    public static final int ISSUCCESSED_FIELD_NUMBER = 1;
    private boolean isSuccessed_;
    public boolean hasIsSuccessed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getIsSuccessed() {
      return isSuccessed_;
    }
    
    private void initFields() {
      isSuccessed_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasIsSuccessed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isSuccessed_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isSuccessed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.RegisterResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_RegisterResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        isSuccessed_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse result = new vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isSuccessed_ = isSuccessed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse.getDefaultInstance()) return this;
        if (other.hasIsSuccessed()) {
          setIsSuccessed(other.getIsSuccessed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasIsSuccessed()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isSuccessed_ = input.readBool();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required bool isSuccessed = 1;
      private boolean isSuccessed_ ;
      public boolean hasIsSuccessed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getIsSuccessed() {
        return isSuccessed_;
      }
      public Builder setIsSuccessed(boolean value) {
        bitField0_ |= 0x00000001;
        isSuccessed_ = value;
        onChanged();
        return this;
      }
      public Builder clearIsSuccessed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isSuccessed_ = false;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.RegisterResponse)
    }
    
    static {
      defaultInstance = new RegisterResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.RegisterResponse)
  }
  
  public interface AuthorizeRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string login = 1;
    boolean hasLogin();
    String getLogin();
    
    // required string password = 2;
    boolean hasPassword();
    String getPassword();
  }
  public static final class AuthorizeRequest extends
      com.google.protobuf.GeneratedMessage
      implements AuthorizeRequestOrBuilder {
    // Use AuthorizeRequest.newBuilder() to construct.
    private AuthorizeRequest(Builder builder) {
      super(builder);
    }
    private AuthorizeRequest(boolean noInit) {}
    
    private static final AuthorizeRequest defaultInstance;
    public static AuthorizeRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public AuthorizeRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string login = 1;
    public static final int LOGIN_FIELD_NUMBER = 1;
    private java.lang.Object login_;
    public boolean hasLogin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getLogin() {
      java.lang.Object ref = login_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          login_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getLoginBytes() {
      java.lang.Object ref = login_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        login_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required string password = 2;
    public static final int PASSWORD_FIELD_NUMBER = 2;
    private java.lang.Object password_;
    public boolean hasPassword() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          password_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      login_ = "";
      password_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasLogin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPassword()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLoginBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPasswordBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLoginBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPasswordBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        login_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        password_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest result = new vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.login_ = login_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.password_ = password_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest.getDefaultInstance()) return this;
        if (other.hasLogin()) {
          setLogin(other.getLogin());
        }
        if (other.hasPassword()) {
          setPassword(other.getPassword());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasLogin()) {
          
          return false;
        }
        if (!hasPassword()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              login_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              password_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string login = 1;
      private java.lang.Object login_ = "";
      public boolean hasLogin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getLogin() {
        java.lang.Object ref = login_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          login_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setLogin(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        login_ = value;
        onChanged();
        return this;
      }
      public Builder clearLogin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        login_ = getDefaultInstance().getLogin();
        onChanged();
        return this;
      }
      void setLogin(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        login_ = value;
        onChanged();
      }
      
      // required string password = 2;
      private java.lang.Object password_ = "";
      public boolean hasPassword() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPassword(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
        return this;
      }
      public Builder clearPassword() {
        bitField0_ = (bitField0_ & ~0x00000002);
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      void setPassword(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        password_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.AuthorizeRequest)
    }
    
    static {
      defaultInstance = new AuthorizeRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.AuthorizeRequest)
  }
  
  public interface AuthorizeResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required bool isNewPlayer = 1;
    boolean hasIsNewPlayer();
    boolean getIsNewPlayer();
    
    // required bool isAuthorized = 2;
    boolean hasIsAuthorized();
    boolean getIsAuthorized();
    
    // optional string errorMessage = 3;
    boolean hasErrorMessage();
    String getErrorMessage();
  }
  public static final class AuthorizeResponse extends
      com.google.protobuf.GeneratedMessage
      implements AuthorizeResponseOrBuilder {
    // Use AuthorizeResponse.newBuilder() to construct.
    private AuthorizeResponse(Builder builder) {
      super(builder);
    }
    private AuthorizeResponse(boolean noInit) {}
    
    private static final AuthorizeResponse defaultInstance;
    public static AuthorizeResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public AuthorizeResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required bool isNewPlayer = 1;
    public static final int ISNEWPLAYER_FIELD_NUMBER = 1;
    private boolean isNewPlayer_;
    public boolean hasIsNewPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getIsNewPlayer() {
      return isNewPlayer_;
    }
    
    // required bool isAuthorized = 2;
    public static final int ISAUTHORIZED_FIELD_NUMBER = 2;
    private boolean isAuthorized_;
    public boolean hasIsAuthorized() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public boolean getIsAuthorized() {
      return isAuthorized_;
    }
    
    // optional string errorMessage = 3;
    public static final int ERRORMESSAGE_FIELD_NUMBER = 3;
    private java.lang.Object errorMessage_;
    public boolean hasErrorMessage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public String getErrorMessage() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          errorMessage_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getErrorMessageBytes() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        errorMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      isNewPlayer_ = false;
      isAuthorized_ = false;
      errorMessage_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasIsNewPlayer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsAuthorized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isNewPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isAuthorized_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getErrorMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isNewPlayer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isAuthorized_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getErrorMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_AuthorizeResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        isNewPlayer_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        isAuthorized_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        errorMessage_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse result = new vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isNewPlayer_ = isNewPlayer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isAuthorized_ = isAuthorized_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.errorMessage_ = errorMessage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse.getDefaultInstance()) return this;
        if (other.hasIsNewPlayer()) {
          setIsNewPlayer(other.getIsNewPlayer());
        }
        if (other.hasIsAuthorized()) {
          setIsAuthorized(other.getIsAuthorized());
        }
        if (other.hasErrorMessage()) {
          setErrorMessage(other.getErrorMessage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasIsNewPlayer()) {
          
          return false;
        }
        if (!hasIsAuthorized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isNewPlayer_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isAuthorized_ = input.readBool();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              errorMessage_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required bool isNewPlayer = 1;
      private boolean isNewPlayer_ ;
      public boolean hasIsNewPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getIsNewPlayer() {
        return isNewPlayer_;
      }
      public Builder setIsNewPlayer(boolean value) {
        bitField0_ |= 0x00000001;
        isNewPlayer_ = value;
        onChanged();
        return this;
      }
      public Builder clearIsNewPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isNewPlayer_ = false;
        onChanged();
        return this;
      }
      
      // required bool isAuthorized = 2;
      private boolean isAuthorized_ ;
      public boolean hasIsAuthorized() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public boolean getIsAuthorized() {
        return isAuthorized_;
      }
      public Builder setIsAuthorized(boolean value) {
        bitField0_ |= 0x00000002;
        isAuthorized_ = value;
        onChanged();
        return this;
      }
      public Builder clearIsAuthorized() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isAuthorized_ = false;
        onChanged();
        return this;
      }
      
      // optional string errorMessage = 3;
      private java.lang.Object errorMessage_ = "";
      public boolean hasErrorMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          errorMessage_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setErrorMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        errorMessage_ = value;
        onChanged();
        return this;
      }
      public Builder clearErrorMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        errorMessage_ = getDefaultInstance().getErrorMessage();
        onChanged();
        return this;
      }
      void setErrorMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000004;
        errorMessage_ = value;
        onChanged();
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.AuthorizeResponse)
    }
    
    static {
      defaultInstance = new AuthorizeResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.AuthorizeResponse)
  }
  
  public interface GetMapRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class GetMapRequest extends
      com.google.protobuf.GeneratedMessage
      implements GetMapRequestOrBuilder {
    // Use GetMapRequest.newBuilder() to construct.
    private GetMapRequest(Builder builder) {
      super(builder);
    }
    private GetMapRequest(boolean noInit) {}
    
    private static final GetMapRequest defaultInstance;
    public static GetMapRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetMapRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetMapRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest result = new vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetMapRequest)
    }
    
    static {
      defaultInstance = new GetMapRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetMapRequest)
  }
  
  public interface GetMapResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 mapId = 1;
    boolean hasMapId();
    int getMapId();
    
    // required int32 sizeMapX = 2;
    boolean hasSizeMapX();
    int getSizeMapX();
    
    // required int32 sizeMapY = 3;
    boolean hasSizeMapY();
    int getSizeMapY();
    
    // repeated .tutorial.Castle castles = 4;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Castle> 
        getCastlesList();
    vsu.alivechess.net.commands.AliveChessProtos.Castle getCastles(int index);
    int getCastlesCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
        getCastlesOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastlesOrBuilder(
        int index);
    
    // repeated .tutorial.Mine mines = 5;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Mine> 
        getMinesList();
    vsu.alivechess.net.commands.AliveChessProtos.Mine getMines(int index);
    int getMinesCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> 
        getMinesOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder getMinesOrBuilder(
        int index);
    
    // repeated .tutorial.BasePoint basePoints = 6;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.BasePoint> 
        getBasePointsList();
    vsu.alivechess.net.commands.AliveChessProtos.BasePoint getBasePoints(int index);
    int getBasePointsCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder> 
        getBasePointsOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder getBasePointsOrBuilder(
        int index);
    
    // repeated .tutorial.SingleObject singleObjects = 7;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.SingleObject> 
        getSingleObjectsList();
    vsu.alivechess.net.commands.AliveChessProtos.SingleObject getSingleObjects(int index);
    int getSingleObjectsCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder> 
        getSingleObjectsOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder getSingleObjectsOrBuilder(
        int index);
    
    // repeated .tutorial.MultyObject multyObjects = 8;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.MultyObject> 
        getMultyObjectsList();
    vsu.alivechess.net.commands.AliveChessProtos.MultyObject getMultyObjects(int index);
    int getMultyObjectsCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder> 
        getMultyObjectsOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder getMultyObjectsOrBuilder(
        int index);
    
    // repeated .tutorial.Border borders = 9;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Border> 
        getBordersList();
    vsu.alivechess.net.commands.AliveChessProtos.Border getBorders(int index);
    int getBordersCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder> 
        getBordersOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder getBordersOrBuilder(
        int index);
  }
  public static final class GetMapResponse extends
      com.google.protobuf.GeneratedMessage
      implements GetMapResponseOrBuilder {
    // Use GetMapResponse.newBuilder() to construct.
    private GetMapResponse(Builder builder) {
      super(builder);
    }
    private GetMapResponse(boolean noInit) {}
    
    private static final GetMapResponse defaultInstance;
    public static GetMapResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetMapResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 mapId = 1;
    public static final int MAPID_FIELD_NUMBER = 1;
    private int mapId_;
    public boolean hasMapId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getMapId() {
      return mapId_;
    }
    
    // required int32 sizeMapX = 2;
    public static final int SIZEMAPX_FIELD_NUMBER = 2;
    private int sizeMapX_;
    public boolean hasSizeMapX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getSizeMapX() {
      return sizeMapX_;
    }
    
    // required int32 sizeMapY = 3;
    public static final int SIZEMAPY_FIELD_NUMBER = 3;
    private int sizeMapY_;
    public boolean hasSizeMapY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getSizeMapY() {
      return sizeMapY_;
    }
    
    // repeated .tutorial.Castle castles = 4;
    public static final int CASTLES_FIELD_NUMBER = 4;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Castle> castles_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Castle> getCastlesList() {
      return castles_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
        getCastlesOrBuilderList() {
      return castles_;
    }
    public int getCastlesCount() {
      return castles_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastles(int index) {
      return castles_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastlesOrBuilder(
        int index) {
      return castles_.get(index);
    }
    
    // repeated .tutorial.Mine mines = 5;
    public static final int MINES_FIELD_NUMBER = 5;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Mine> mines_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Mine> getMinesList() {
      return mines_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> 
        getMinesOrBuilderList() {
      return mines_;
    }
    public int getMinesCount() {
      return mines_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Mine getMines(int index) {
      return mines_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder getMinesOrBuilder(
        int index) {
      return mines_.get(index);
    }
    
    // repeated .tutorial.BasePoint basePoints = 6;
    public static final int BASEPOINTS_FIELD_NUMBER = 6;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.BasePoint> basePoints_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.BasePoint> getBasePointsList() {
      return basePoints_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder> 
        getBasePointsOrBuilderList() {
      return basePoints_;
    }
    public int getBasePointsCount() {
      return basePoints_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.BasePoint getBasePoints(int index) {
      return basePoints_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder getBasePointsOrBuilder(
        int index) {
      return basePoints_.get(index);
    }
    
    // repeated .tutorial.SingleObject singleObjects = 7;
    public static final int SINGLEOBJECTS_FIELD_NUMBER = 7;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.SingleObject> singleObjects_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.SingleObject> getSingleObjectsList() {
      return singleObjects_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder> 
        getSingleObjectsOrBuilderList() {
      return singleObjects_;
    }
    public int getSingleObjectsCount() {
      return singleObjects_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.SingleObject getSingleObjects(int index) {
      return singleObjects_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder getSingleObjectsOrBuilder(
        int index) {
      return singleObjects_.get(index);
    }
    
    // repeated .tutorial.MultyObject multyObjects = 8;
    public static final int MULTYOBJECTS_FIELD_NUMBER = 8;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.MultyObject> multyObjects_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.MultyObject> getMultyObjectsList() {
      return multyObjects_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder> 
        getMultyObjectsOrBuilderList() {
      return multyObjects_;
    }
    public int getMultyObjectsCount() {
      return multyObjects_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.MultyObject getMultyObjects(int index) {
      return multyObjects_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder getMultyObjectsOrBuilder(
        int index) {
      return multyObjects_.get(index);
    }
    
    // repeated .tutorial.Border borders = 9;
    public static final int BORDERS_FIELD_NUMBER = 9;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Border> borders_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Border> getBordersList() {
      return borders_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder> 
        getBordersOrBuilderList() {
      return borders_;
    }
    public int getBordersCount() {
      return borders_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Border getBorders(int index) {
      return borders_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder getBordersOrBuilder(
        int index) {
      return borders_.get(index);
    }
    
    private void initFields() {
      mapId_ = 0;
      sizeMapX_ = 0;
      sizeMapY_ = 0;
      castles_ = java.util.Collections.emptyList();
      mines_ = java.util.Collections.emptyList();
      basePoints_ = java.util.Collections.emptyList();
      singleObjects_ = java.util.Collections.emptyList();
      multyObjects_ = java.util.Collections.emptyList();
      borders_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMapId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSizeMapX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSizeMapY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getCastlesCount(); i++) {
        if (!getCastles(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMinesCount(); i++) {
        if (!getMines(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBasePointsCount(); i++) {
        if (!getBasePoints(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getSingleObjectsCount(); i++) {
        if (!getSingleObjects(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMultyObjectsCount(); i++) {
        if (!getMultyObjects(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBordersCount(); i++) {
        if (!getBorders(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mapId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, sizeMapX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, sizeMapY_);
      }
      for (int i = 0; i < castles_.size(); i++) {
        output.writeMessage(4, castles_.get(i));
      }
      for (int i = 0; i < mines_.size(); i++) {
        output.writeMessage(5, mines_.get(i));
      }
      for (int i = 0; i < basePoints_.size(); i++) {
        output.writeMessage(6, basePoints_.get(i));
      }
      for (int i = 0; i < singleObjects_.size(); i++) {
        output.writeMessage(7, singleObjects_.get(i));
      }
      for (int i = 0; i < multyObjects_.size(); i++) {
        output.writeMessage(8, multyObjects_.get(i));
      }
      for (int i = 0; i < borders_.size(); i++) {
        output.writeMessage(9, borders_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mapId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, sizeMapX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, sizeMapY_);
      }
      for (int i = 0; i < castles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, castles_.get(i));
      }
      for (int i = 0; i < mines_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, mines_.get(i));
      }
      for (int i = 0; i < basePoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, basePoints_.get(i));
      }
      for (int i = 0; i < singleObjects_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, singleObjects_.get(i));
      }
      for (int i = 0; i < multyObjects_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, multyObjects_.get(i));
      }
      for (int i = 0; i < borders_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, borders_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetMapResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetMapResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCastlesFieldBuilder();
          getMinesFieldBuilder();
          getBasePointsFieldBuilder();
          getSingleObjectsFieldBuilder();
          getMultyObjectsFieldBuilder();
          getBordersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        mapId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        sizeMapX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        sizeMapY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (castlesBuilder_ == null) {
          castles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          castlesBuilder_.clear();
        }
        if (minesBuilder_ == null) {
          mines_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          minesBuilder_.clear();
        }
        if (basePointsBuilder_ == null) {
          basePoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          basePointsBuilder_.clear();
        }
        if (singleObjectsBuilder_ == null) {
          singleObjects_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          singleObjectsBuilder_.clear();
        }
        if (multyObjectsBuilder_ == null) {
          multyObjects_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          multyObjectsBuilder_.clear();
        }
        if (bordersBuilder_ == null) {
          borders_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          bordersBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse result = new vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mapId_ = mapId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sizeMapX_ = sizeMapX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sizeMapY_ = sizeMapY_;
        if (castlesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            castles_ = java.util.Collections.unmodifiableList(castles_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.castles_ = castles_;
        } else {
          result.castles_ = castlesBuilder_.build();
        }
        if (minesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            mines_ = java.util.Collections.unmodifiableList(mines_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.mines_ = mines_;
        } else {
          result.mines_ = minesBuilder_.build();
        }
        if (basePointsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            basePoints_ = java.util.Collections.unmodifiableList(basePoints_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.basePoints_ = basePoints_;
        } else {
          result.basePoints_ = basePointsBuilder_.build();
        }
        if (singleObjectsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            singleObjects_ = java.util.Collections.unmodifiableList(singleObjects_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.singleObjects_ = singleObjects_;
        } else {
          result.singleObjects_ = singleObjectsBuilder_.build();
        }
        if (multyObjectsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            multyObjects_ = java.util.Collections.unmodifiableList(multyObjects_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.multyObjects_ = multyObjects_;
        } else {
          result.multyObjects_ = multyObjectsBuilder_.build();
        }
        if (bordersBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            borders_ = java.util.Collections.unmodifiableList(borders_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.borders_ = borders_;
        } else {
          result.borders_ = bordersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse.getDefaultInstance()) return this;
        if (other.hasMapId()) {
          setMapId(other.getMapId());
        }
        if (other.hasSizeMapX()) {
          setSizeMapX(other.getSizeMapX());
        }
        if (other.hasSizeMapY()) {
          setSizeMapY(other.getSizeMapY());
        }
        if (castlesBuilder_ == null) {
          if (!other.castles_.isEmpty()) {
            if (castles_.isEmpty()) {
              castles_ = other.castles_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureCastlesIsMutable();
              castles_.addAll(other.castles_);
            }
            onChanged();
          }
        } else {
          if (!other.castles_.isEmpty()) {
            if (castlesBuilder_.isEmpty()) {
              castlesBuilder_.dispose();
              castlesBuilder_ = null;
              castles_ = other.castles_;
              bitField0_ = (bitField0_ & ~0x00000008);
              castlesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCastlesFieldBuilder() : null;
            } else {
              castlesBuilder_.addAllMessages(other.castles_);
            }
          }
        }
        if (minesBuilder_ == null) {
          if (!other.mines_.isEmpty()) {
            if (mines_.isEmpty()) {
              mines_ = other.mines_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureMinesIsMutable();
              mines_.addAll(other.mines_);
            }
            onChanged();
          }
        } else {
          if (!other.mines_.isEmpty()) {
            if (minesBuilder_.isEmpty()) {
              minesBuilder_.dispose();
              minesBuilder_ = null;
              mines_ = other.mines_;
              bitField0_ = (bitField0_ & ~0x00000010);
              minesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMinesFieldBuilder() : null;
            } else {
              minesBuilder_.addAllMessages(other.mines_);
            }
          }
        }
        if (basePointsBuilder_ == null) {
          if (!other.basePoints_.isEmpty()) {
            if (basePoints_.isEmpty()) {
              basePoints_ = other.basePoints_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureBasePointsIsMutable();
              basePoints_.addAll(other.basePoints_);
            }
            onChanged();
          }
        } else {
          if (!other.basePoints_.isEmpty()) {
            if (basePointsBuilder_.isEmpty()) {
              basePointsBuilder_.dispose();
              basePointsBuilder_ = null;
              basePoints_ = other.basePoints_;
              bitField0_ = (bitField0_ & ~0x00000020);
              basePointsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBasePointsFieldBuilder() : null;
            } else {
              basePointsBuilder_.addAllMessages(other.basePoints_);
            }
          }
        }
        if (singleObjectsBuilder_ == null) {
          if (!other.singleObjects_.isEmpty()) {
            if (singleObjects_.isEmpty()) {
              singleObjects_ = other.singleObjects_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureSingleObjectsIsMutable();
              singleObjects_.addAll(other.singleObjects_);
            }
            onChanged();
          }
        } else {
          if (!other.singleObjects_.isEmpty()) {
            if (singleObjectsBuilder_.isEmpty()) {
              singleObjectsBuilder_.dispose();
              singleObjectsBuilder_ = null;
              singleObjects_ = other.singleObjects_;
              bitField0_ = (bitField0_ & ~0x00000040);
              singleObjectsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSingleObjectsFieldBuilder() : null;
            } else {
              singleObjectsBuilder_.addAllMessages(other.singleObjects_);
            }
          }
        }
        if (multyObjectsBuilder_ == null) {
          if (!other.multyObjects_.isEmpty()) {
            if (multyObjects_.isEmpty()) {
              multyObjects_ = other.multyObjects_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureMultyObjectsIsMutable();
              multyObjects_.addAll(other.multyObjects_);
            }
            onChanged();
          }
        } else {
          if (!other.multyObjects_.isEmpty()) {
            if (multyObjectsBuilder_.isEmpty()) {
              multyObjectsBuilder_.dispose();
              multyObjectsBuilder_ = null;
              multyObjects_ = other.multyObjects_;
              bitField0_ = (bitField0_ & ~0x00000080);
              multyObjectsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMultyObjectsFieldBuilder() : null;
            } else {
              multyObjectsBuilder_.addAllMessages(other.multyObjects_);
            }
          }
        }
        if (bordersBuilder_ == null) {
          if (!other.borders_.isEmpty()) {
            if (borders_.isEmpty()) {
              borders_ = other.borders_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureBordersIsMutable();
              borders_.addAll(other.borders_);
            }
            onChanged();
          }
        } else {
          if (!other.borders_.isEmpty()) {
            if (bordersBuilder_.isEmpty()) {
              bordersBuilder_.dispose();
              bordersBuilder_ = null;
              borders_ = other.borders_;
              bitField0_ = (bitField0_ & ~0x00000100);
              bordersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBordersFieldBuilder() : null;
            } else {
              bordersBuilder_.addAllMessages(other.borders_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMapId()) {
          
          return false;
        }
        if (!hasSizeMapX()) {
          
          return false;
        }
        if (!hasSizeMapY()) {
          
          return false;
        }
        for (int i = 0; i < getCastlesCount(); i++) {
          if (!getCastles(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getMinesCount(); i++) {
          if (!getMines(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBasePointsCount(); i++) {
          if (!getBasePoints(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getSingleObjectsCount(); i++) {
          if (!getSingleObjects(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getMultyObjectsCount(); i++) {
          if (!getMultyObjects(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBordersCount(); i++) {
          if (!getBorders(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mapId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sizeMapX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sizeMapY_ = input.readInt32();
              break;
            }
            case 34: {
              vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCastles(subBuilder.buildPartial());
              break;
            }
            case 42: {
              vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Mine.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMines(subBuilder.buildPartial());
              break;
            }
            case 50: {
              vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.BasePoint.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addBasePoints(subBuilder.buildPartial());
              break;
            }
            case 58: {
              vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.SingleObject.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSingleObjects(subBuilder.buildPartial());
              break;
            }
            case 66: {
              vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.MultyObject.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addMultyObjects(subBuilder.buildPartial());
              break;
            }
            case 74: {
              vsu.alivechess.net.commands.AliveChessProtos.Border.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Border.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addBorders(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 mapId = 1;
      private int mapId_ ;
      public boolean hasMapId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getMapId() {
        return mapId_;
      }
      public Builder setMapId(int value) {
        bitField0_ |= 0x00000001;
        mapId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMapId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mapId_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 sizeMapX = 2;
      private int sizeMapX_ ;
      public boolean hasSizeMapX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getSizeMapX() {
        return sizeMapX_;
      }
      public Builder setSizeMapX(int value) {
        bitField0_ |= 0x00000002;
        sizeMapX_ = value;
        onChanged();
        return this;
      }
      public Builder clearSizeMapX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sizeMapX_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 sizeMapY = 3;
      private int sizeMapY_ ;
      public boolean hasSizeMapY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getSizeMapY() {
        return sizeMapY_;
      }
      public Builder setSizeMapY(int value) {
        bitField0_ |= 0x00000004;
        sizeMapY_ = value;
        onChanged();
        return this;
      }
      public Builder clearSizeMapY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sizeMapY_ = 0;
        onChanged();
        return this;
      }
      
      // repeated .tutorial.Castle castles = 4;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Castle> castles_ =
        java.util.Collections.emptyList();
      private void ensureCastlesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          castles_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.Castle>(castles_);
          bitField0_ |= 0x00000008;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> castlesBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Castle> getCastlesList() {
        if (castlesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(castles_);
        } else {
          return castlesBuilder_.getMessageList();
        }
      }
      public int getCastlesCount() {
        if (castlesBuilder_ == null) {
          return castles_.size();
        } else {
          return castlesBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastles(int index) {
        if (castlesBuilder_ == null) {
          return castles_.get(index);
        } else {
          return castlesBuilder_.getMessage(index);
        }
      }
      public Builder setCastles(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCastlesIsMutable();
          castles_.set(index, value);
          onChanged();
        } else {
          castlesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setCastles(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder builderForValue) {
        if (castlesBuilder_ == null) {
          ensureCastlesIsMutable();
          castles_.set(index, builderForValue.build());
          onChanged();
        } else {
          castlesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addCastles(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCastlesIsMutable();
          castles_.add(value);
          onChanged();
        } else {
          castlesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addCastles(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCastlesIsMutable();
          castles_.add(index, value);
          onChanged();
        } else {
          castlesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addCastles(
          vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder builderForValue) {
        if (castlesBuilder_ == null) {
          ensureCastlesIsMutable();
          castles_.add(builderForValue.build());
          onChanged();
        } else {
          castlesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addCastles(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder builderForValue) {
        if (castlesBuilder_ == null) {
          ensureCastlesIsMutable();
          castles_.add(index, builderForValue.build());
          onChanged();
        } else {
          castlesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllCastles(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.Castle> values) {
        if (castlesBuilder_ == null) {
          ensureCastlesIsMutable();
          super.addAll(values, castles_);
          onChanged();
        } else {
          castlesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearCastles() {
        if (castlesBuilder_ == null) {
          castles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          castlesBuilder_.clear();
        }
        return this;
      }
      public Builder removeCastles(int index) {
        if (castlesBuilder_ == null) {
          ensureCastlesIsMutable();
          castles_.remove(index);
          onChanged();
        } else {
          castlesBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder getCastlesBuilder(
          int index) {
        return getCastlesFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastlesOrBuilder(
          int index) {
        if (castlesBuilder_ == null) {
          return castles_.get(index);  } else {
          return castlesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
           getCastlesOrBuilderList() {
        if (castlesBuilder_ != null) {
          return castlesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(castles_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder addCastlesBuilder() {
        return getCastlesFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder addCastlesBuilder(
          int index) {
        return getCastlesFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder> 
           getCastlesBuilderList() {
        return getCastlesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
          getCastlesFieldBuilder() {
        if (castlesBuilder_ == null) {
          castlesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder>(
                  castles_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          castles_ = null;
        }
        return castlesBuilder_;
      }
      
      // repeated .tutorial.Mine mines = 5;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Mine> mines_ =
        java.util.Collections.emptyList();
      private void ensureMinesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          mines_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.Mine>(mines_);
          bitField0_ |= 0x00000010;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Mine, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder, vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> minesBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Mine> getMinesList() {
        if (minesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mines_);
        } else {
          return minesBuilder_.getMessageList();
        }
      }
      public int getMinesCount() {
        if (minesBuilder_ == null) {
          return mines_.size();
        } else {
          return minesBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Mine getMines(int index) {
        if (minesBuilder_ == null) {
          return mines_.get(index);
        } else {
          return minesBuilder_.getMessage(index);
        }
      }
      public Builder setMines(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Mine value) {
        if (minesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMinesIsMutable();
          mines_.set(index, value);
          onChanged();
        } else {
          minesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setMines(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder builderForValue) {
        if (minesBuilder_ == null) {
          ensureMinesIsMutable();
          mines_.set(index, builderForValue.build());
          onChanged();
        } else {
          minesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addMines(vsu.alivechess.net.commands.AliveChessProtos.Mine value) {
        if (minesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMinesIsMutable();
          mines_.add(value);
          onChanged();
        } else {
          minesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addMines(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Mine value) {
        if (minesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMinesIsMutable();
          mines_.add(index, value);
          onChanged();
        } else {
          minesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addMines(
          vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder builderForValue) {
        if (minesBuilder_ == null) {
          ensureMinesIsMutable();
          mines_.add(builderForValue.build());
          onChanged();
        } else {
          minesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addMines(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder builderForValue) {
        if (minesBuilder_ == null) {
          ensureMinesIsMutable();
          mines_.add(index, builderForValue.build());
          onChanged();
        } else {
          minesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllMines(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.Mine> values) {
        if (minesBuilder_ == null) {
          ensureMinesIsMutable();
          super.addAll(values, mines_);
          onChanged();
        } else {
          minesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearMines() {
        if (minesBuilder_ == null) {
          mines_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          minesBuilder_.clear();
        }
        return this;
      }
      public Builder removeMines(int index) {
        if (minesBuilder_ == null) {
          ensureMinesIsMutable();
          mines_.remove(index);
          onChanged();
        } else {
          minesBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder getMinesBuilder(
          int index) {
        return getMinesFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder getMinesOrBuilder(
          int index) {
        if (minesBuilder_ == null) {
          return mines_.get(index);  } else {
          return minesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> 
           getMinesOrBuilderList() {
        if (minesBuilder_ != null) {
          return minesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mines_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder addMinesBuilder() {
        return getMinesFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder addMinesBuilder(
          int index) {
        return getMinesFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder> 
           getMinesBuilderList() {
        return getMinesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Mine, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder, vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> 
          getMinesFieldBuilder() {
        if (minesBuilder_ == null) {
          minesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Mine, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder, vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder>(
                  mines_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          mines_ = null;
        }
        return minesBuilder_;
      }
      
      // repeated .tutorial.BasePoint basePoints = 6;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.BasePoint> basePoints_ =
        java.util.Collections.emptyList();
      private void ensureBasePointsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          basePoints_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.BasePoint>(basePoints_);
          bitField0_ |= 0x00000020;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.BasePoint, vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder, vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder> basePointsBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.BasePoint> getBasePointsList() {
        if (basePointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(basePoints_);
        } else {
          return basePointsBuilder_.getMessageList();
        }
      }
      public int getBasePointsCount() {
        if (basePointsBuilder_ == null) {
          return basePoints_.size();
        } else {
          return basePointsBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint getBasePoints(int index) {
        if (basePointsBuilder_ == null) {
          return basePoints_.get(index);
        } else {
          return basePointsBuilder_.getMessage(index);
        }
      }
      public Builder setBasePoints(
          int index, vsu.alivechess.net.commands.AliveChessProtos.BasePoint value) {
        if (basePointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBasePointsIsMutable();
          basePoints_.set(index, value);
          onChanged();
        } else {
          basePointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setBasePoints(
          int index, vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder builderForValue) {
        if (basePointsBuilder_ == null) {
          ensureBasePointsIsMutable();
          basePoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          basePointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addBasePoints(vsu.alivechess.net.commands.AliveChessProtos.BasePoint value) {
        if (basePointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBasePointsIsMutable();
          basePoints_.add(value);
          onChanged();
        } else {
          basePointsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addBasePoints(
          int index, vsu.alivechess.net.commands.AliveChessProtos.BasePoint value) {
        if (basePointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBasePointsIsMutable();
          basePoints_.add(index, value);
          onChanged();
        } else {
          basePointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addBasePoints(
          vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder builderForValue) {
        if (basePointsBuilder_ == null) {
          ensureBasePointsIsMutable();
          basePoints_.add(builderForValue.build());
          onChanged();
        } else {
          basePointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addBasePoints(
          int index, vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder builderForValue) {
        if (basePointsBuilder_ == null) {
          ensureBasePointsIsMutable();
          basePoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          basePointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllBasePoints(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.BasePoint> values) {
        if (basePointsBuilder_ == null) {
          ensureBasePointsIsMutable();
          super.addAll(values, basePoints_);
          onChanged();
        } else {
          basePointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearBasePoints() {
        if (basePointsBuilder_ == null) {
          basePoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          basePointsBuilder_.clear();
        }
        return this;
      }
      public Builder removeBasePoints(int index) {
        if (basePointsBuilder_ == null) {
          ensureBasePointsIsMutable();
          basePoints_.remove(index);
          onChanged();
        } else {
          basePointsBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder getBasePointsBuilder(
          int index) {
        return getBasePointsFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder getBasePointsOrBuilder(
          int index) {
        if (basePointsBuilder_ == null) {
          return basePoints_.get(index);  } else {
          return basePointsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder> 
           getBasePointsOrBuilderList() {
        if (basePointsBuilder_ != null) {
          return basePointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(basePoints_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder addBasePointsBuilder() {
        return getBasePointsFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.BasePoint.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder addBasePointsBuilder(
          int index) {
        return getBasePointsFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.BasePoint.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder> 
           getBasePointsBuilderList() {
        return getBasePointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.BasePoint, vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder, vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder> 
          getBasePointsFieldBuilder() {
        if (basePointsBuilder_ == null) {
          basePointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.BasePoint, vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder, vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder>(
                  basePoints_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          basePoints_ = null;
        }
        return basePointsBuilder_;
      }
      
      // repeated .tutorial.SingleObject singleObjects = 7;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.SingleObject> singleObjects_ =
        java.util.Collections.emptyList();
      private void ensureSingleObjectsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          singleObjects_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.SingleObject>(singleObjects_);
          bitField0_ |= 0x00000040;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.SingleObject, vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder, vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder> singleObjectsBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.SingleObject> getSingleObjectsList() {
        if (singleObjectsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(singleObjects_);
        } else {
          return singleObjectsBuilder_.getMessageList();
        }
      }
      public int getSingleObjectsCount() {
        if (singleObjectsBuilder_ == null) {
          return singleObjects_.size();
        } else {
          return singleObjectsBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject getSingleObjects(int index) {
        if (singleObjectsBuilder_ == null) {
          return singleObjects_.get(index);
        } else {
          return singleObjectsBuilder_.getMessage(index);
        }
      }
      public Builder setSingleObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.SingleObject value) {
        if (singleObjectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSingleObjectsIsMutable();
          singleObjects_.set(index, value);
          onChanged();
        } else {
          singleObjectsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setSingleObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder builderForValue) {
        if (singleObjectsBuilder_ == null) {
          ensureSingleObjectsIsMutable();
          singleObjects_.set(index, builderForValue.build());
          onChanged();
        } else {
          singleObjectsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addSingleObjects(vsu.alivechess.net.commands.AliveChessProtos.SingleObject value) {
        if (singleObjectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSingleObjectsIsMutable();
          singleObjects_.add(value);
          onChanged();
        } else {
          singleObjectsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addSingleObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.SingleObject value) {
        if (singleObjectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSingleObjectsIsMutable();
          singleObjects_.add(index, value);
          onChanged();
        } else {
          singleObjectsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addSingleObjects(
          vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder builderForValue) {
        if (singleObjectsBuilder_ == null) {
          ensureSingleObjectsIsMutable();
          singleObjects_.add(builderForValue.build());
          onChanged();
        } else {
          singleObjectsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addSingleObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder builderForValue) {
        if (singleObjectsBuilder_ == null) {
          ensureSingleObjectsIsMutable();
          singleObjects_.add(index, builderForValue.build());
          onChanged();
        } else {
          singleObjectsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllSingleObjects(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.SingleObject> values) {
        if (singleObjectsBuilder_ == null) {
          ensureSingleObjectsIsMutable();
          super.addAll(values, singleObjects_);
          onChanged();
        } else {
          singleObjectsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearSingleObjects() {
        if (singleObjectsBuilder_ == null) {
          singleObjects_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          singleObjectsBuilder_.clear();
        }
        return this;
      }
      public Builder removeSingleObjects(int index) {
        if (singleObjectsBuilder_ == null) {
          ensureSingleObjectsIsMutable();
          singleObjects_.remove(index);
          onChanged();
        } else {
          singleObjectsBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder getSingleObjectsBuilder(
          int index) {
        return getSingleObjectsFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder getSingleObjectsOrBuilder(
          int index) {
        if (singleObjectsBuilder_ == null) {
          return singleObjects_.get(index);  } else {
          return singleObjectsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder> 
           getSingleObjectsOrBuilderList() {
        if (singleObjectsBuilder_ != null) {
          return singleObjectsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(singleObjects_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder addSingleObjectsBuilder() {
        return getSingleObjectsFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.SingleObject.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder addSingleObjectsBuilder(
          int index) {
        return getSingleObjectsFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.SingleObject.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder> 
           getSingleObjectsBuilderList() {
        return getSingleObjectsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.SingleObject, vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder, vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder> 
          getSingleObjectsFieldBuilder() {
        if (singleObjectsBuilder_ == null) {
          singleObjectsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.SingleObject, vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder, vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder>(
                  singleObjects_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          singleObjects_ = null;
        }
        return singleObjectsBuilder_;
      }
      
      // repeated .tutorial.MultyObject multyObjects = 8;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.MultyObject> multyObjects_ =
        java.util.Collections.emptyList();
      private void ensureMultyObjectsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          multyObjects_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.MultyObject>(multyObjects_);
          bitField0_ |= 0x00000080;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.MultyObject, vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder, vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder> multyObjectsBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.MultyObject> getMultyObjectsList() {
        if (multyObjectsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(multyObjects_);
        } else {
          return multyObjectsBuilder_.getMessageList();
        }
      }
      public int getMultyObjectsCount() {
        if (multyObjectsBuilder_ == null) {
          return multyObjects_.size();
        } else {
          return multyObjectsBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject getMultyObjects(int index) {
        if (multyObjectsBuilder_ == null) {
          return multyObjects_.get(index);
        } else {
          return multyObjectsBuilder_.getMessage(index);
        }
      }
      public Builder setMultyObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.MultyObject value) {
        if (multyObjectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMultyObjectsIsMutable();
          multyObjects_.set(index, value);
          onChanged();
        } else {
          multyObjectsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setMultyObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder builderForValue) {
        if (multyObjectsBuilder_ == null) {
          ensureMultyObjectsIsMutable();
          multyObjects_.set(index, builderForValue.build());
          onChanged();
        } else {
          multyObjectsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addMultyObjects(vsu.alivechess.net.commands.AliveChessProtos.MultyObject value) {
        if (multyObjectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMultyObjectsIsMutable();
          multyObjects_.add(value);
          onChanged();
        } else {
          multyObjectsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addMultyObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.MultyObject value) {
        if (multyObjectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMultyObjectsIsMutable();
          multyObjects_.add(index, value);
          onChanged();
        } else {
          multyObjectsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addMultyObjects(
          vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder builderForValue) {
        if (multyObjectsBuilder_ == null) {
          ensureMultyObjectsIsMutable();
          multyObjects_.add(builderForValue.build());
          onChanged();
        } else {
          multyObjectsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addMultyObjects(
          int index, vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder builderForValue) {
        if (multyObjectsBuilder_ == null) {
          ensureMultyObjectsIsMutable();
          multyObjects_.add(index, builderForValue.build());
          onChanged();
        } else {
          multyObjectsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllMultyObjects(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.MultyObject> values) {
        if (multyObjectsBuilder_ == null) {
          ensureMultyObjectsIsMutable();
          super.addAll(values, multyObjects_);
          onChanged();
        } else {
          multyObjectsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearMultyObjects() {
        if (multyObjectsBuilder_ == null) {
          multyObjects_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          multyObjectsBuilder_.clear();
        }
        return this;
      }
      public Builder removeMultyObjects(int index) {
        if (multyObjectsBuilder_ == null) {
          ensureMultyObjectsIsMutable();
          multyObjects_.remove(index);
          onChanged();
        } else {
          multyObjectsBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder getMultyObjectsBuilder(
          int index) {
        return getMultyObjectsFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder getMultyObjectsOrBuilder(
          int index) {
        if (multyObjectsBuilder_ == null) {
          return multyObjects_.get(index);  } else {
          return multyObjectsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder> 
           getMultyObjectsOrBuilderList() {
        if (multyObjectsBuilder_ != null) {
          return multyObjectsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(multyObjects_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder addMultyObjectsBuilder() {
        return getMultyObjectsFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.MultyObject.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder addMultyObjectsBuilder(
          int index) {
        return getMultyObjectsFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.MultyObject.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder> 
           getMultyObjectsBuilderList() {
        return getMultyObjectsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.MultyObject, vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder, vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder> 
          getMultyObjectsFieldBuilder() {
        if (multyObjectsBuilder_ == null) {
          multyObjectsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.MultyObject, vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder, vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder>(
                  multyObjects_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          multyObjects_ = null;
        }
        return multyObjectsBuilder_;
      }
      
      // repeated .tutorial.Border borders = 9;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Border> borders_ =
        java.util.Collections.emptyList();
      private void ensureBordersIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          borders_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.Border>(borders_);
          bitField0_ |= 0x00000100;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Border, vsu.alivechess.net.commands.AliveChessProtos.Border.Builder, vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder> bordersBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Border> getBordersList() {
        if (bordersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(borders_);
        } else {
          return bordersBuilder_.getMessageList();
        }
      }
      public int getBordersCount() {
        if (bordersBuilder_ == null) {
          return borders_.size();
        } else {
          return bordersBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Border getBorders(int index) {
        if (bordersBuilder_ == null) {
          return borders_.get(index);
        } else {
          return bordersBuilder_.getMessage(index);
        }
      }
      public Builder setBorders(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Border value) {
        if (bordersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBordersIsMutable();
          borders_.set(index, value);
          onChanged();
        } else {
          bordersBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setBorders(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Border.Builder builderForValue) {
        if (bordersBuilder_ == null) {
          ensureBordersIsMutable();
          borders_.set(index, builderForValue.build());
          onChanged();
        } else {
          bordersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addBorders(vsu.alivechess.net.commands.AliveChessProtos.Border value) {
        if (bordersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBordersIsMutable();
          borders_.add(value);
          onChanged();
        } else {
          bordersBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addBorders(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Border value) {
        if (bordersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBordersIsMutable();
          borders_.add(index, value);
          onChanged();
        } else {
          bordersBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addBorders(
          vsu.alivechess.net.commands.AliveChessProtos.Border.Builder builderForValue) {
        if (bordersBuilder_ == null) {
          ensureBordersIsMutable();
          borders_.add(builderForValue.build());
          onChanged();
        } else {
          bordersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addBorders(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Border.Builder builderForValue) {
        if (bordersBuilder_ == null) {
          ensureBordersIsMutable();
          borders_.add(index, builderForValue.build());
          onChanged();
        } else {
          bordersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllBorders(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.Border> values) {
        if (bordersBuilder_ == null) {
          ensureBordersIsMutable();
          super.addAll(values, borders_);
          onChanged();
        } else {
          bordersBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearBorders() {
        if (bordersBuilder_ == null) {
          borders_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          bordersBuilder_.clear();
        }
        return this;
      }
      public Builder removeBorders(int index) {
        if (bordersBuilder_ == null) {
          ensureBordersIsMutable();
          borders_.remove(index);
          onChanged();
        } else {
          bordersBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Border.Builder getBordersBuilder(
          int index) {
        return getBordersFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder getBordersOrBuilder(
          int index) {
        if (bordersBuilder_ == null) {
          return borders_.get(index);  } else {
          return bordersBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder> 
           getBordersOrBuilderList() {
        if (bordersBuilder_ != null) {
          return bordersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(borders_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Border.Builder addBordersBuilder() {
        return getBordersFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.Border.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Border.Builder addBordersBuilder(
          int index) {
        return getBordersFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.Border.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Border.Builder> 
           getBordersBuilderList() {
        return getBordersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Border, vsu.alivechess.net.commands.AliveChessProtos.Border.Builder, vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder> 
          getBordersFieldBuilder() {
        if (bordersBuilder_ == null) {
          bordersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Border, vsu.alivechess.net.commands.AliveChessProtos.Border.Builder, vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder>(
                  borders_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          borders_ = null;
        }
        return bordersBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetMapResponse)
    }
    
    static {
      defaultInstance = new GetMapResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetMapResponse)
  }
  
  public interface CastleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 castleId = 1;
    boolean hasCastleId();
    int getCastleId();
    
    // optional int32 leftX = 2;
    boolean hasLeftX();
    int getLeftX();
    
    // optional int32 topY = 3;
    boolean hasTopY();
    int getTopY();
    
    // optional int32 width = 4;
    boolean hasWidth();
    int getWidth();
    
    // optional int32 height = 5;
    boolean hasHeight();
    int getHeight();
    
    // optional float wayCost = 6;
    boolean hasWayCost();
    float getWayCost();
  }
  public static final class Castle extends
      com.google.protobuf.GeneratedMessage
      implements CastleOrBuilder {
    // Use Castle.newBuilder() to construct.
    private Castle(Builder builder) {
      super(builder);
    }
    private Castle(boolean noInit) {}
    
    private static final Castle defaultInstance;
    public static Castle getDefaultInstance() {
      return defaultInstance;
    }
    
    public Castle getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Castle_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Castle_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 castleId = 1;
    public static final int CASTLEID_FIELD_NUMBER = 1;
    private int castleId_;
    public boolean hasCastleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCastleId() {
      return castleId_;
    }
    
    // optional int32 leftX = 2;
    public static final int LEFTX_FIELD_NUMBER = 2;
    private int leftX_;
    public boolean hasLeftX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getLeftX() {
      return leftX_;
    }
    
    // optional int32 topY = 3;
    public static final int TOPY_FIELD_NUMBER = 3;
    private int topY_;
    public boolean hasTopY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getTopY() {
      return topY_;
    }
    
    // optional int32 width = 4;
    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getWidth() {
      return width_;
    }
    
    // optional int32 height = 5;
    public static final int HEIGHT_FIELD_NUMBER = 5;
    private int height_;
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getHeight() {
      return height_;
    }
    
    // optional float wayCost = 6;
    public static final int WAYCOST_FIELD_NUMBER = 6;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    private void initFields() {
      castleId_ = 0;
      leftX_ = 0;
      topY_ = 0;
      width_ = 0;
      height_ = 0;
      wayCost_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCastleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, castleId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, leftX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, topY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, width_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, height_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, wayCost_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, castleId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, leftX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, topY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, width_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, height_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, wayCost_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Castle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.Castle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Castle_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Castle_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        castleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        leftX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        topY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Castle.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Castle getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Castle build() {
        vsu.alivechess.net.commands.AliveChessProtos.Castle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.Castle buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.Castle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Castle buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.Castle result = new vsu.alivechess.net.commands.AliveChessProtos.Castle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.castleId_ = castleId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.leftX_ = leftX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.topY_ = topY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.wayCost_ = wayCost_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.Castle) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.Castle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.Castle other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance()) return this;
        if (other.hasCastleId()) {
          setCastleId(other.getCastleId());
        }
        if (other.hasLeftX()) {
          setLeftX(other.getLeftX());
        }
        if (other.hasTopY()) {
          setTopY(other.getTopY());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCastleId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              castleId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              leftX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              topY_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              height_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              wayCost_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 castleId = 1;
      private int castleId_ ;
      public boolean hasCastleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCastleId() {
        return castleId_;
      }
      public Builder setCastleId(int value) {
        bitField0_ |= 0x00000001;
        castleId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCastleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        castleId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 leftX = 2;
      private int leftX_ ;
      public boolean hasLeftX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getLeftX() {
        return leftX_;
      }
      public Builder setLeftX(int value) {
        bitField0_ |= 0x00000002;
        leftX_ = value;
        onChanged();
        return this;
      }
      public Builder clearLeftX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        leftX_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 topY = 3;
      private int topY_ ;
      public boolean hasTopY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getTopY() {
        return topY_;
      }
      public Builder setTopY(int value) {
        bitField0_ |= 0x00000004;
        topY_ = value;
        onChanged();
        return this;
      }
      public Builder clearTopY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        topY_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 width = 4;
      private int width_ ;
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getWidth() {
        return width_;
      }
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 height = 5;
      private int height_ ;
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getHeight() {
        return height_;
      }
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000010;
        height_ = value;
        onChanged();
        return this;
      }
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        height_ = 0;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 6;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000020;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.Castle)
    }
    
    static {
      defaultInstance = new Castle(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.Castle)
  }
  
  public interface MineOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 mineId = 1;
    boolean hasMineId();
    int getMineId();
    
    // optional int32 leftX = 2;
    boolean hasLeftX();
    int getLeftX();
    
    // optional int32 topY = 3;
    boolean hasTopY();
    int getTopY();
    
    // optional int32 width = 4;
    boolean hasWidth();
    int getWidth();
    
    // optional int32 height = 5;
    boolean hasHeight();
    int getHeight();
    
    // optional float wayCost = 6;
    boolean hasWayCost();
    float getWayCost();
    
    // optional .tutorial.Resource gainingResource = 7;
    boolean hasGainingResource();
    vsu.alivechess.net.commands.AliveChessProtos.Resource getGainingResource();
    vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getGainingResourceOrBuilder();
    
    // optional int32 sizeMine = 8;
    boolean hasSizeMine();
    int getSizeMine();
  }
  public static final class Mine extends
      com.google.protobuf.GeneratedMessage
      implements MineOrBuilder {
    // Use Mine.newBuilder() to construct.
    private Mine(Builder builder) {
      super(builder);
    }
    private Mine(boolean noInit) {}
    
    private static final Mine defaultInstance;
    public static Mine getDefaultInstance() {
      return defaultInstance;
    }
    
    public Mine getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Mine_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Mine_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 mineId = 1;
    public static final int MINEID_FIELD_NUMBER = 1;
    private int mineId_;
    public boolean hasMineId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getMineId() {
      return mineId_;
    }
    
    // optional int32 leftX = 2;
    public static final int LEFTX_FIELD_NUMBER = 2;
    private int leftX_;
    public boolean hasLeftX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getLeftX() {
      return leftX_;
    }
    
    // optional int32 topY = 3;
    public static final int TOPY_FIELD_NUMBER = 3;
    private int topY_;
    public boolean hasTopY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getTopY() {
      return topY_;
    }
    
    // optional int32 width = 4;
    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getWidth() {
      return width_;
    }
    
    // optional int32 height = 5;
    public static final int HEIGHT_FIELD_NUMBER = 5;
    private int height_;
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getHeight() {
      return height_;
    }
    
    // optional float wayCost = 6;
    public static final int WAYCOST_FIELD_NUMBER = 6;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    // optional .tutorial.Resource gainingResource = 7;
    public static final int GAININGRESOURCE_FIELD_NUMBER = 7;
    private vsu.alivechess.net.commands.AliveChessProtos.Resource gainingResource_;
    public boolean hasGainingResource() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Resource getGainingResource() {
      return gainingResource_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getGainingResourceOrBuilder() {
      return gainingResource_;
    }
    
    // optional int32 sizeMine = 8;
    public static final int SIZEMINE_FIELD_NUMBER = 8;
    private int sizeMine_;
    public boolean hasSizeMine() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public int getSizeMine() {
      return sizeMine_;
    }
    
    private void initFields() {
      mineId_ = 0;
      leftX_ = 0;
      topY_ = 0;
      width_ = 0;
      height_ = 0;
      wayCost_ = 0F;
      gainingResource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
      sizeMine_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMineId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mineId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, leftX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, topY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, width_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, height_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, wayCost_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, gainingResource_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, sizeMine_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mineId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, leftX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, topY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, width_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, height_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, wayCost_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, gainingResource_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, sizeMine_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Mine parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.Mine prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Mine_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Mine_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.Mine.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGainingResourceFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        mineId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        leftX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        topY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (gainingResourceBuilder_ == null) {
          gainingResource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
        } else {
          gainingResourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        sizeMine_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Mine.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Mine getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Mine build() {
        vsu.alivechess.net.commands.AliveChessProtos.Mine result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.Mine buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.Mine result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Mine buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.Mine result = new vsu.alivechess.net.commands.AliveChessProtos.Mine(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mineId_ = mineId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.leftX_ = leftX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.topY_ = topY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.wayCost_ = wayCost_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (gainingResourceBuilder_ == null) {
          result.gainingResource_ = gainingResource_;
        } else {
          result.gainingResource_ = gainingResourceBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.sizeMine_ = sizeMine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.Mine) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.Mine)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.Mine other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance()) return this;
        if (other.hasMineId()) {
          setMineId(other.getMineId());
        }
        if (other.hasLeftX()) {
          setLeftX(other.getLeftX());
        }
        if (other.hasTopY()) {
          setTopY(other.getTopY());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        if (other.hasGainingResource()) {
          mergeGainingResource(other.getGainingResource());
        }
        if (other.hasSizeMine()) {
          setSizeMine(other.getSizeMine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMineId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mineId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              leftX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              topY_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              height_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              wayCost_ = input.readFloat();
              break;
            }
            case 58: {
              vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder();
              if (hasGainingResource()) {
                subBuilder.mergeFrom(getGainingResource());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGainingResource(subBuilder.buildPartial());
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              sizeMine_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 mineId = 1;
      private int mineId_ ;
      public boolean hasMineId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getMineId() {
        return mineId_;
      }
      public Builder setMineId(int value) {
        bitField0_ |= 0x00000001;
        mineId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMineId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mineId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 leftX = 2;
      private int leftX_ ;
      public boolean hasLeftX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getLeftX() {
        return leftX_;
      }
      public Builder setLeftX(int value) {
        bitField0_ |= 0x00000002;
        leftX_ = value;
        onChanged();
        return this;
      }
      public Builder clearLeftX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        leftX_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 topY = 3;
      private int topY_ ;
      public boolean hasTopY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getTopY() {
        return topY_;
      }
      public Builder setTopY(int value) {
        bitField0_ |= 0x00000004;
        topY_ = value;
        onChanged();
        return this;
      }
      public Builder clearTopY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        topY_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 width = 4;
      private int width_ ;
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getWidth() {
        return width_;
      }
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 height = 5;
      private int height_ ;
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getHeight() {
        return height_;
      }
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000010;
        height_ = value;
        onChanged();
        return this;
      }
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        height_ = 0;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 6;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000020;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // optional .tutorial.Resource gainingResource = 7;
      private vsu.alivechess.net.commands.AliveChessProtos.Resource gainingResource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> gainingResourceBuilder_;
      public boolean hasGainingResource() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource getGainingResource() {
        if (gainingResourceBuilder_ == null) {
          return gainingResource_;
        } else {
          return gainingResourceBuilder_.getMessage();
        }
      }
      public Builder setGainingResource(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (gainingResourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gainingResource_ = value;
          onChanged();
        } else {
          gainingResourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder setGainingResource(
          vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (gainingResourceBuilder_ == null) {
          gainingResource_ = builderForValue.build();
          onChanged();
        } else {
          gainingResourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder mergeGainingResource(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (gainingResourceBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              gainingResource_ != vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance()) {
            gainingResource_ =
              vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder(gainingResource_).mergeFrom(value).buildPartial();
          } else {
            gainingResource_ = value;
          }
          onChanged();
        } else {
          gainingResourceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder clearGainingResource() {
        if (gainingResourceBuilder_ == null) {
          gainingResource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
          onChanged();
        } else {
          gainingResourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder getGainingResourceBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getGainingResourceFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getGainingResourceOrBuilder() {
        if (gainingResourceBuilder_ != null) {
          return gainingResourceBuilder_.getMessageOrBuilder();
        } else {
          return gainingResource_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
          getGainingResourceFieldBuilder() {
        if (gainingResourceBuilder_ == null) {
          gainingResourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder>(
                  gainingResource_,
                  getParentForChildren(),
                  isClean());
          gainingResource_ = null;
        }
        return gainingResourceBuilder_;
      }
      
      // optional int32 sizeMine = 8;
      private int sizeMine_ ;
      public boolean hasSizeMine() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public int getSizeMine() {
        return sizeMine_;
      }
      public Builder setSizeMine(int value) {
        bitField0_ |= 0x00000080;
        sizeMine_ = value;
        onChanged();
        return this;
      }
      public Builder clearSizeMine() {
        bitField0_ = (bitField0_ & ~0x00000080);
        sizeMine_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.Mine)
    }
    
    static {
      defaultInstance = new Mine(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.Mine)
  }
  
  public interface ResourceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 resourceId = 1;
    boolean hasResourceId();
    int getResourceId();
    
    // optional int32 x = 2;
    boolean hasX();
    int getX();
    
    // optional int32 y = 3;
    boolean hasY();
    int getY();
    
    // optional .tutorial.ResourceTypes resourceType = 4;
    boolean hasResourceType();
    vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes getResourceType();
    
    // optional int32 resourceCount = 5;
    boolean hasResourceCount();
    int getResourceCount();
    
    // optional float wayCost = 6;
    boolean hasWayCost();
    float getWayCost();
  }
  public static final class Resource extends
      com.google.protobuf.GeneratedMessage
      implements ResourceOrBuilder {
    // Use Resource.newBuilder() to construct.
    private Resource(Builder builder) {
      super(builder);
    }
    private Resource(boolean noInit) {}
    
    private static final Resource defaultInstance;
    public static Resource getDefaultInstance() {
      return defaultInstance;
    }
    
    public Resource getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Resource_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Resource_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 resourceId = 1;
    public static final int RESOURCEID_FIELD_NUMBER = 1;
    private int resourceId_;
    public boolean hasResourceId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getResourceId() {
      return resourceId_;
    }
    
    // optional int32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getX() {
      return x_;
    }
    
    // optional int32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getY() {
      return y_;
    }
    
    // optional .tutorial.ResourceTypes resourceType = 4;
    public static final int RESOURCETYPE_FIELD_NUMBER = 4;
    private vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes resourceType_;
    public boolean hasResourceType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes getResourceType() {
      return resourceType_;
    }
    
    // optional int32 resourceCount = 5;
    public static final int RESOURCECOUNT_FIELD_NUMBER = 5;
    private int resourceCount_;
    public boolean hasResourceCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getResourceCount() {
      return resourceCount_;
    }
    
    // optional float wayCost = 6;
    public static final int WAYCOST_FIELD_NUMBER = 6;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    private void initFields() {
      resourceId_ = 0;
      x_ = 0;
      y_ = 0;
      resourceType_ = vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes.rCoal;
      resourceCount_ = 0;
      wayCost_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, resourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, resourceType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, resourceCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, wayCost_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, resourceId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, resourceType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, resourceCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, wayCost_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Resource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.Resource prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Resource_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Resource_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        resourceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        resourceType_ = vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes.rCoal;
        bitField0_ = (bitField0_ & ~0x00000008);
        resourceCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Resource.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Resource getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Resource build() {
        vsu.alivechess.net.commands.AliveChessProtos.Resource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.Resource buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.Resource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Resource buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.Resource result = new vsu.alivechess.net.commands.AliveChessProtos.Resource(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.resourceId_ = resourceId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.resourceType_ = resourceType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.resourceCount_ = resourceCount_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.wayCost_ = wayCost_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.Resource) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.Resource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.Resource other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance()) return this;
        if (other.hasResourceId()) {
          setResourceId(other.getResourceId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasResourceType()) {
          setResourceType(other.getResourceType());
        }
        if (other.hasResourceCount()) {
          setResourceCount(other.getResourceCount());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              resourceId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              x_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              y_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes value = vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                resourceType_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              resourceCount_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              wayCost_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 resourceId = 1;
      private int resourceId_ ;
      public boolean hasResourceId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getResourceId() {
        return resourceId_;
      }
      public Builder setResourceId(int value) {
        bitField0_ |= 0x00000001;
        resourceId_ = value;
        onChanged();
        return this;
      }
      public Builder clearResourceId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        resourceId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 x = 2;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 y = 3;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // optional .tutorial.ResourceTypes resourceType = 4;
      private vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes resourceType_ = vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes.rCoal;
      public boolean hasResourceType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes getResourceType() {
        return resourceType_;
      }
      public Builder setResourceType(vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        resourceType_ = value;
        onChanged();
        return this;
      }
      public Builder clearResourceType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        resourceType_ = vsu.alivechess.net.commands.AliveChessProtos.ResourceTypes.rCoal;
        onChanged();
        return this;
      }
      
      // optional int32 resourceCount = 5;
      private int resourceCount_ ;
      public boolean hasResourceCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getResourceCount() {
        return resourceCount_;
      }
      public Builder setResourceCount(int value) {
        bitField0_ |= 0x00000010;
        resourceCount_ = value;
        onChanged();
        return this;
      }
      public Builder clearResourceCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        resourceCount_ = 0;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 6;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000020;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.Resource)
    }
    
    static {
      defaultInstance = new Resource(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.Resource)
  }
  
  public interface BasePointOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 basePointId = 1;
    boolean hasBasePointId();
    int getBasePointId();
    
    // required int32 x = 2;
    boolean hasX();
    int getX();
    
    // required int32 y = 3;
    boolean hasY();
    int getY();
    
    // required .tutorial.LandscapeTypes landscapePointType = 4;
    boolean hasLandscapePointType();
    vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes getLandscapePointType();
    
    // optional float wayCost = 5;
    boolean hasWayCost();
    float getWayCost();
  }
  public static final class BasePoint extends
      com.google.protobuf.GeneratedMessage
      implements BasePointOrBuilder {
    // Use BasePoint.newBuilder() to construct.
    private BasePoint(Builder builder) {
      super(builder);
    }
    private BasePoint(boolean noInit) {}
    
    private static final BasePoint defaultInstance;
    public static BasePoint getDefaultInstance() {
      return defaultInstance;
    }
    
    public BasePoint getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BasePoint_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BasePoint_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 basePointId = 1;
    public static final int BASEPOINTID_FIELD_NUMBER = 1;
    private int basePointId_;
    public boolean hasBasePointId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getBasePointId() {
      return basePointId_;
    }
    
    // required int32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getX() {
      return x_;
    }
    
    // required int32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getY() {
      return y_;
    }
    
    // required .tutorial.LandscapeTypes landscapePointType = 4;
    public static final int LANDSCAPEPOINTTYPE_FIELD_NUMBER = 4;
    private vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes landscapePointType_;
    public boolean hasLandscapePointType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes getLandscapePointType() {
      return landscapePointType_;
    }
    
    // optional float wayCost = 5;
    public static final int WAYCOST_FIELD_NUMBER = 5;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    private void initFields() {
      basePointId_ = 0;
      x_ = 0;
      y_ = 0;
      landscapePointType_ = vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes.None;
      wayCost_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasBasePointId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLandscapePointType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, basePointId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, landscapePointType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, wayCost_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, basePointId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, landscapePointType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, wayCost_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BasePoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.BasePoint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.BasePointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BasePoint_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BasePoint_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.BasePoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        basePointId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        landscapePointType_ = vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes.None;
        bitField0_ = (bitField0_ & ~0x00000008);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.BasePoint.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.BasePoint.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint build() {
        vsu.alivechess.net.commands.AliveChessProtos.BasePoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.BasePoint buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.BasePoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BasePoint buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.BasePoint result = new vsu.alivechess.net.commands.AliveChessProtos.BasePoint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.basePointId_ = basePointId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.landscapePointType_ = landscapePointType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.wayCost_ = wayCost_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.BasePoint) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.BasePoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.BasePoint other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.BasePoint.getDefaultInstance()) return this;
        if (other.hasBasePointId()) {
          setBasePointId(other.getBasePointId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasLandscapePointType()) {
          setLandscapePointType(other.getLandscapePointType());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasBasePointId()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasLandscapePointType()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              basePointId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              x_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              y_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes value = vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                landscapePointType_ = value;
              }
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              wayCost_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 basePointId = 1;
      private int basePointId_ ;
      public boolean hasBasePointId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getBasePointId() {
        return basePointId_;
      }
      public Builder setBasePointId(int value) {
        bitField0_ |= 0x00000001;
        basePointId_ = value;
        onChanged();
        return this;
      }
      public Builder clearBasePointId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        basePointId_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 x = 2;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 y = 3;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // required .tutorial.LandscapeTypes landscapePointType = 4;
      private vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes landscapePointType_ = vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes.None;
      public boolean hasLandscapePointType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes getLandscapePointType() {
        return landscapePointType_;
      }
      public Builder setLandscapePointType(vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        landscapePointType_ = value;
        onChanged();
        return this;
      }
      public Builder clearLandscapePointType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        landscapePointType_ = vsu.alivechess.net.commands.AliveChessProtos.LandscapeTypes.None;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 5;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000010;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000010);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.BasePoint)
    }
    
    static {
      defaultInstance = new BasePoint(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.BasePoint)
  }
  
  public interface GetGameStateRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class GetGameStateRequest extends
      com.google.protobuf.GeneratedMessage
      implements GetGameStateRequestOrBuilder {
    // Use GetGameStateRequest.newBuilder() to construct.
    private GetGameStateRequest(Builder builder) {
      super(builder);
    }
    private GetGameStateRequest(boolean noInit) {}
    
    private static final GetGameStateRequest defaultInstance;
    public static GetGameStateRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetGameStateRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest result = new vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetGameStateRequest)
    }
    
    static {
      defaultInstance = new GetGameStateRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetGameStateRequest)
  }
  
  public interface GetGameStateResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .tutorial.King king = 1;
    boolean hasKing();
    vsu.alivechess.net.commands.AliveChessProtos.King getKing();
    vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getKingOrBuilder();
    
    // required .tutorial.Castle castle = 2;
    boolean hasCastle();
    vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle();
    vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder();
    
    // repeated .tutorial.Resource startResources = 3;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> 
        getStartResourcesList();
    vsu.alivechess.net.commands.AliveChessProtos.Resource getStartResources(int index);
    int getStartResourcesCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
        getStartResourcesOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getStartResourcesOrBuilder(
        int index);
  }
  public static final class GetGameStateResponse extends
      com.google.protobuf.GeneratedMessage
      implements GetGameStateResponseOrBuilder {
    // Use GetGameStateResponse.newBuilder() to construct.
    private GetGameStateResponse(Builder builder) {
      super(builder);
    }
    private GetGameStateResponse(boolean noInit) {}
    
    private static final GetGameStateResponse defaultInstance;
    public static GetGameStateResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetGameStateResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .tutorial.King king = 1;
    public static final int KING_FIELD_NUMBER = 1;
    private vsu.alivechess.net.commands.AliveChessProtos.King king_;
    public boolean hasKing() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.King getKing() {
      return king_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getKingOrBuilder() {
      return king_;
    }
    
    // required .tutorial.Castle castle = 2;
    public static final int CASTLE_FIELD_NUMBER = 2;
    private vsu.alivechess.net.commands.AliveChessProtos.Castle castle_;
    public boolean hasCastle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle() {
      return castle_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder() {
      return castle_;
    }
    
    // repeated .tutorial.Resource startResources = 3;
    public static final int STARTRESOURCES_FIELD_NUMBER = 3;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> startResources_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> getStartResourcesList() {
      return startResources_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
        getStartResourcesOrBuilderList() {
      return startResources_;
    }
    public int getStartResourcesCount() {
      return startResources_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Resource getStartResources(int index) {
      return startResources_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getStartResourcesOrBuilder(
        int index) {
      return startResources_.get(index);
    }
    
    private void initFields() {
      king_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
      castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
      startResources_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasKing()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCastle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCastle().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, king_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, castle_);
      }
      for (int i = 0; i < startResources_.size(); i++) {
        output.writeMessage(3, startResources_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, king_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, castle_);
      }
      for (int i = 0; i < startResources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, startResources_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetGameStateResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getKingFieldBuilder();
          getCastleFieldBuilder();
          getStartResourcesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (kingBuilder_ == null) {
          king_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
        } else {
          kingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (castleBuilder_ == null) {
          castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (startResourcesBuilder_ == null) {
          startResources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          startResourcesBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse result = new vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (kingBuilder_ == null) {
          result.king_ = king_;
        } else {
          result.king_ = kingBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (castleBuilder_ == null) {
          result.castle_ = castle_;
        } else {
          result.castle_ = castleBuilder_.build();
        }
        if (startResourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            startResources_ = java.util.Collections.unmodifiableList(startResources_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.startResources_ = startResources_;
        } else {
          result.startResources_ = startResourcesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse.getDefaultInstance()) return this;
        if (other.hasKing()) {
          mergeKing(other.getKing());
        }
        if (other.hasCastle()) {
          mergeCastle(other.getCastle());
        }
        if (startResourcesBuilder_ == null) {
          if (!other.startResources_.isEmpty()) {
            if (startResources_.isEmpty()) {
              startResources_ = other.startResources_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStartResourcesIsMutable();
              startResources_.addAll(other.startResources_);
            }
            onChanged();
          }
        } else {
          if (!other.startResources_.isEmpty()) {
            if (startResourcesBuilder_.isEmpty()) {
              startResourcesBuilder_.dispose();
              startResourcesBuilder_ = null;
              startResources_ = other.startResources_;
              bitField0_ = (bitField0_ & ~0x00000004);
              startResourcesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStartResourcesFieldBuilder() : null;
            } else {
              startResourcesBuilder_.addAllMessages(other.startResources_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasKing()) {
          
          return false;
        }
        if (!hasCastle()) {
          
          return false;
        }
        if (!getCastle().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.King.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.King.newBuilder();
              if (hasKing()) {
                subBuilder.mergeFrom(getKing());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKing(subBuilder.buildPartial());
              break;
            }
            case 18: {
              vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder();
              if (hasCastle()) {
                subBuilder.mergeFrom(getCastle());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCastle(subBuilder.buildPartial());
              break;
            }
            case 26: {
              vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addStartResources(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .tutorial.King king = 1;
      private vsu.alivechess.net.commands.AliveChessProtos.King king_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> kingBuilder_;
      public boolean hasKing() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King getKing() {
        if (kingBuilder_ == null) {
          return king_;
        } else {
          return kingBuilder_.getMessage();
        }
      }
      public Builder setKing(vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (kingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          king_ = value;
          onChanged();
        } else {
          kingBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setKing(
          vsu.alivechess.net.commands.AliveChessProtos.King.Builder builderForValue) {
        if (kingBuilder_ == null) {
          king_ = builderForValue.build();
          onChanged();
        } else {
          kingBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeKing(vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (kingBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              king_ != vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance()) {
            king_ =
              vsu.alivechess.net.commands.AliveChessProtos.King.newBuilder(king_).mergeFrom(value).buildPartial();
          } else {
            king_ = value;
          }
          onChanged();
        } else {
          kingBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearKing() {
        if (kingBuilder_ == null) {
          king_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
          onChanged();
        } else {
          kingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King.Builder getKingBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getKingFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getKingOrBuilder() {
        if (kingBuilder_ != null) {
          return kingBuilder_.getMessageOrBuilder();
        } else {
          return king_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> 
          getKingFieldBuilder() {
        if (kingBuilder_ == null) {
          kingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder>(
                  king_,
                  getParentForChildren(),
                  isClean());
          king_ = null;
        }
        return kingBuilder_;
      }
      
      // required .tutorial.Castle castle = 2;
      private vsu.alivechess.net.commands.AliveChessProtos.Castle castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> castleBuilder_;
      public boolean hasCastle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle() {
        if (castleBuilder_ == null) {
          return castle_;
        } else {
          return castleBuilder_.getMessage();
        }
      }
      public Builder setCastle(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          castle_ = value;
          onChanged();
        } else {
          castleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setCastle(
          vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder builderForValue) {
        if (castleBuilder_ == null) {
          castle_ = builderForValue.build();
          onChanged();
        } else {
          castleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeCastle(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castleBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              castle_ != vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance()) {
            castle_ =
              vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder(castle_).mergeFrom(value).buildPartial();
          } else {
            castle_ = value;
          }
          onChanged();
        } else {
          castleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearCastle() {
        if (castleBuilder_ == null) {
          castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
          onChanged();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder getCastleBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCastleFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder() {
        if (castleBuilder_ != null) {
          return castleBuilder_.getMessageOrBuilder();
        } else {
          return castle_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
          getCastleFieldBuilder() {
        if (castleBuilder_ == null) {
          castleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder>(
                  castle_,
                  getParentForChildren(),
                  isClean());
          castle_ = null;
        }
        return castleBuilder_;
      }
      
      // repeated .tutorial.Resource startResources = 3;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> startResources_ =
        java.util.Collections.emptyList();
      private void ensureStartResourcesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          startResources_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.Resource>(startResources_);
          bitField0_ |= 0x00000004;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> startResourcesBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> getStartResourcesList() {
        if (startResourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(startResources_);
        } else {
          return startResourcesBuilder_.getMessageList();
        }
      }
      public int getStartResourcesCount() {
        if (startResourcesBuilder_ == null) {
          return startResources_.size();
        } else {
          return startResourcesBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource getStartResources(int index) {
        if (startResourcesBuilder_ == null) {
          return startResources_.get(index);
        } else {
          return startResourcesBuilder_.getMessage(index);
        }
      }
      public Builder setStartResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (startResourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartResourcesIsMutable();
          startResources_.set(index, value);
          onChanged();
        } else {
          startResourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setStartResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (startResourcesBuilder_ == null) {
          ensureStartResourcesIsMutable();
          startResources_.set(index, builderForValue.build());
          onChanged();
        } else {
          startResourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addStartResources(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (startResourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartResourcesIsMutable();
          startResources_.add(value);
          onChanged();
        } else {
          startResourcesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addStartResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (startResourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStartResourcesIsMutable();
          startResources_.add(index, value);
          onChanged();
        } else {
          startResourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addStartResources(
          vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (startResourcesBuilder_ == null) {
          ensureStartResourcesIsMutable();
          startResources_.add(builderForValue.build());
          onChanged();
        } else {
          startResourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addStartResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (startResourcesBuilder_ == null) {
          ensureStartResourcesIsMutable();
          startResources_.add(index, builderForValue.build());
          onChanged();
        } else {
          startResourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllStartResources(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.Resource> values) {
        if (startResourcesBuilder_ == null) {
          ensureStartResourcesIsMutable();
          super.addAll(values, startResources_);
          onChanged();
        } else {
          startResourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearStartResources() {
        if (startResourcesBuilder_ == null) {
          startResources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          startResourcesBuilder_.clear();
        }
        return this;
      }
      public Builder removeStartResources(int index) {
        if (startResourcesBuilder_ == null) {
          ensureStartResourcesIsMutable();
          startResources_.remove(index);
          onChanged();
        } else {
          startResourcesBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder getStartResourcesBuilder(
          int index) {
        return getStartResourcesFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getStartResourcesOrBuilder(
          int index) {
        if (startResourcesBuilder_ == null) {
          return startResources_.get(index);  } else {
          return startResourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
           getStartResourcesOrBuilderList() {
        if (startResourcesBuilder_ != null) {
          return startResourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(startResources_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder addStartResourcesBuilder() {
        return getStartResourcesFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder addStartResourcesBuilder(
          int index) {
        return getStartResourcesFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder> 
           getStartResourcesBuilderList() {
        return getStartResourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
          getStartResourcesFieldBuilder() {
        if (startResourcesBuilder_ == null) {
          startResourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder>(
                  startResources_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          startResources_ = null;
        }
        return startResourcesBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetGameStateResponse)
    }
    
    static {
      defaultInstance = new GetGameStateResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetGameStateResponse)
  }
  
  public interface KingOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 kingId = 1;
    boolean hasKingId();
    int getKingId();
    
    // optional int32 x = 2;
    boolean hasX();
    int getX();
    
    // optional int32 y = 3;
    boolean hasY();
    int getY();
    
    // optional string kingName = 4;
    boolean hasKingName();
    String getKingName();
    
    // optional int32 kingExperience = 5;
    boolean hasKingExperience();
    int getKingExperience();
    
    // optional int32 kingMilitaryRank = 6;
    boolean hasKingMilitaryRank();
    int getKingMilitaryRank();
  }
  public static final class King extends
      com.google.protobuf.GeneratedMessage
      implements KingOrBuilder {
    // Use King.newBuilder() to construct.
    private King(Builder builder) {
      super(builder);
    }
    private King(boolean noInit) {}
    
    private static final King defaultInstance;
    public static King getDefaultInstance() {
      return defaultInstance;
    }
    
    public King getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_King_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_King_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 kingId = 1;
    public static final int KINGID_FIELD_NUMBER = 1;
    private int kingId_;
    public boolean hasKingId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getKingId() {
      return kingId_;
    }
    
    // optional int32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getX() {
      return x_;
    }
    
    // optional int32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getY() {
      return y_;
    }
    
    // optional string kingName = 4;
    public static final int KINGNAME_FIELD_NUMBER = 4;
    private java.lang.Object kingName_;
    public boolean hasKingName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public String getKingName() {
      java.lang.Object ref = kingName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          kingName_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getKingNameBytes() {
      java.lang.Object ref = kingName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        kingName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional int32 kingExperience = 5;
    public static final int KINGEXPERIENCE_FIELD_NUMBER = 5;
    private int kingExperience_;
    public boolean hasKingExperience() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getKingExperience() {
      return kingExperience_;
    }
    
    // optional int32 kingMilitaryRank = 6;
    public static final int KINGMILITARYRANK_FIELD_NUMBER = 6;
    private int kingMilitaryRank_;
    public boolean hasKingMilitaryRank() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getKingMilitaryRank() {
      return kingMilitaryRank_;
    }
    
    private void initFields() {
      kingId_ = 0;
      x_ = 0;
      y_ = 0;
      kingName_ = "";
      kingExperience_ = 0;
      kingMilitaryRank_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, kingId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getKingNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, kingExperience_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, kingMilitaryRank_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, kingId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getKingNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, kingExperience_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, kingMilitaryRank_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.King parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.King prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_King_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_King_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.King.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        kingId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        kingName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        kingExperience_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        kingMilitaryRank_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.King.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.King getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.King build() {
        vsu.alivechess.net.commands.AliveChessProtos.King result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.King buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.King result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.King buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.King result = new vsu.alivechess.net.commands.AliveChessProtos.King(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kingId_ = kingId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.kingName_ = kingName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.kingExperience_ = kingExperience_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.kingMilitaryRank_ = kingMilitaryRank_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.King) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.King)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.King other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance()) return this;
        if (other.hasKingId()) {
          setKingId(other.getKingId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasKingName()) {
          setKingName(other.getKingName());
        }
        if (other.hasKingExperience()) {
          setKingExperience(other.getKingExperience());
        }
        if (other.hasKingMilitaryRank()) {
          setKingMilitaryRank(other.getKingMilitaryRank());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              kingId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              x_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              y_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              kingName_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              kingExperience_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              kingMilitaryRank_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 kingId = 1;
      private int kingId_ ;
      public boolean hasKingId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getKingId() {
        return kingId_;
      }
      public Builder setKingId(int value) {
        bitField0_ |= 0x00000001;
        kingId_ = value;
        onChanged();
        return this;
      }
      public Builder clearKingId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kingId_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 x = 2;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 y = 3;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // optional string kingName = 4;
      private java.lang.Object kingName_ = "";
      public boolean hasKingName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public String getKingName() {
        java.lang.Object ref = kingName_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          kingName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setKingName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        kingName_ = value;
        onChanged();
        return this;
      }
      public Builder clearKingName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        kingName_ = getDefaultInstance().getKingName();
        onChanged();
        return this;
      }
      void setKingName(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000008;
        kingName_ = value;
        onChanged();
      }
      
      // optional int32 kingExperience = 5;
      private int kingExperience_ ;
      public boolean hasKingExperience() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getKingExperience() {
        return kingExperience_;
      }
      public Builder setKingExperience(int value) {
        bitField0_ |= 0x00000010;
        kingExperience_ = value;
        onChanged();
        return this;
      }
      public Builder clearKingExperience() {
        bitField0_ = (bitField0_ & ~0x00000010);
        kingExperience_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 kingMilitaryRank = 6;
      private int kingMilitaryRank_ ;
      public boolean hasKingMilitaryRank() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getKingMilitaryRank() {
        return kingMilitaryRank_;
      }
      public Builder setKingMilitaryRank(int value) {
        bitField0_ |= 0x00000020;
        kingMilitaryRank_ = value;
        onChanged();
        return this;
      }
      public Builder clearKingMilitaryRank() {
        bitField0_ = (bitField0_ & ~0x00000020);
        kingMilitaryRank_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.King)
    }
    
    static {
      defaultInstance = new King(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.King)
  }
  
  public interface GetObjectsRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 observerId = 1;
    boolean hasObserverId();
    int getObserverId();
    
    // optional bool forConcreteObserver = 2;
    boolean hasForConcreteObserver();
    boolean getForConcreteObserver();
    
    // optional .tutorial.PointTypes observerType = 3;
    boolean hasObserverType();
    vsu.alivechess.net.commands.AliveChessProtos.PointTypes getObserverType();
  }
  public static final class GetObjectsRequest extends
      com.google.protobuf.GeneratedMessage
      implements GetObjectsRequestOrBuilder {
    // Use GetObjectsRequest.newBuilder() to construct.
    private GetObjectsRequest(Builder builder) {
      super(builder);
    }
    private GetObjectsRequest(boolean noInit) {}
    
    private static final GetObjectsRequest defaultInstance;
    public static GetObjectsRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetObjectsRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 observerId = 1;
    public static final int OBSERVERID_FIELD_NUMBER = 1;
    private int observerId_;
    public boolean hasObserverId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getObserverId() {
      return observerId_;
    }
    
    // optional bool forConcreteObserver = 2;
    public static final int FORCONCRETEOBSERVER_FIELD_NUMBER = 2;
    private boolean forConcreteObserver_;
    public boolean hasForConcreteObserver() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public boolean getForConcreteObserver() {
      return forConcreteObserver_;
    }
    
    // optional .tutorial.PointTypes observerType = 3;
    public static final int OBSERVERTYPE_FIELD_NUMBER = 3;
    private vsu.alivechess.net.commands.AliveChessProtos.PointTypes observerType_;
    public boolean hasObserverType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.PointTypes getObserverType() {
      return observerType_;
    }
    
    private void initFields() {
      observerId_ = 0;
      forConcreteObserver_ = false;
      observerType_ = vsu.alivechess.net.commands.AliveChessProtos.PointTypes.pNone;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, observerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, forConcreteObserver_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, observerType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, observerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, forConcreteObserver_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, observerType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        observerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        forConcreteObserver_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        observerType_ = vsu.alivechess.net.commands.AliveChessProtos.PointTypes.pNone;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest result = new vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.observerId_ = observerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.forConcreteObserver_ = forConcreteObserver_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.observerType_ = observerType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest.getDefaultInstance()) return this;
        if (other.hasObserverId()) {
          setObserverId(other.getObserverId());
        }
        if (other.hasForConcreteObserver()) {
          setForConcreteObserver(other.getForConcreteObserver());
        }
        if (other.hasObserverType()) {
          setObserverType(other.getObserverType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              observerId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              forConcreteObserver_ = input.readBool();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              vsu.alivechess.net.commands.AliveChessProtos.PointTypes value = vsu.alivechess.net.commands.AliveChessProtos.PointTypes.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                observerType_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 observerId = 1;
      private int observerId_ ;
      public boolean hasObserverId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getObserverId() {
        return observerId_;
      }
      public Builder setObserverId(int value) {
        bitField0_ |= 0x00000001;
        observerId_ = value;
        onChanged();
        return this;
      }
      public Builder clearObserverId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        observerId_ = 0;
        onChanged();
        return this;
      }
      
      // optional bool forConcreteObserver = 2;
      private boolean forConcreteObserver_ ;
      public boolean hasForConcreteObserver() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public boolean getForConcreteObserver() {
        return forConcreteObserver_;
      }
      public Builder setForConcreteObserver(boolean value) {
        bitField0_ |= 0x00000002;
        forConcreteObserver_ = value;
        onChanged();
        return this;
      }
      public Builder clearForConcreteObserver() {
        bitField0_ = (bitField0_ & ~0x00000002);
        forConcreteObserver_ = false;
        onChanged();
        return this;
      }
      
      // optional .tutorial.PointTypes observerType = 3;
      private vsu.alivechess.net.commands.AliveChessProtos.PointTypes observerType_ = vsu.alivechess.net.commands.AliveChessProtos.PointTypes.pNone;
      public boolean hasObserverType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.PointTypes getObserverType() {
        return observerType_;
      }
      public Builder setObserverType(vsu.alivechess.net.commands.AliveChessProtos.PointTypes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        observerType_ = value;
        onChanged();
        return this;
      }
      public Builder clearObserverType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        observerType_ = vsu.alivechess.net.commands.AliveChessProtos.PointTypes.pNone;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetObjectsRequest)
    }
    
    static {
      defaultInstance = new GetObjectsRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetObjectsRequest)
  }
  
  public interface GetObjectsResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .tutorial.Resource resources = 1;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> 
        getResourcesList();
    vsu.alivechess.net.commands.AliveChessProtos.Resource getResources(int index);
    int getResourcesCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
        getResourcesOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourcesOrBuilder(
        int index);
    
    // repeated .tutorial.King kings = 2;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.King> 
        getKingsList();
    vsu.alivechess.net.commands.AliveChessProtos.King getKings(int index);
    int getKingsCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> 
        getKingsOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getKingsOrBuilder(
        int index);
  }
  public static final class GetObjectsResponse extends
      com.google.protobuf.GeneratedMessage
      implements GetObjectsResponseOrBuilder {
    // Use GetObjectsResponse.newBuilder() to construct.
    private GetObjectsResponse(Builder builder) {
      super(builder);
    }
    private GetObjectsResponse(boolean noInit) {}
    
    private static final GetObjectsResponse defaultInstance;
    public static GetObjectsResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetObjectsResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsResponse_fieldAccessorTable;
    }
    
    // repeated .tutorial.Resource resources = 1;
    public static final int RESOURCES_FIELD_NUMBER = 1;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> resources_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> getResourcesList() {
      return resources_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
        getResourcesOrBuilderList() {
      return resources_;
    }
    public int getResourcesCount() {
      return resources_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Resource getResources(int index) {
      return resources_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourcesOrBuilder(
        int index) {
      return resources_.get(index);
    }
    
    // repeated .tutorial.King kings = 2;
    public static final int KINGS_FIELD_NUMBER = 2;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.King> kings_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.King> getKingsList() {
      return kings_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> 
        getKingsOrBuilderList() {
      return kings_;
    }
    public int getKingsCount() {
      return kings_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.King getKings(int index) {
      return kings_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getKingsOrBuilder(
        int index) {
      return kings_.get(index);
    }
    
    private void initFields() {
      resources_ = java.util.Collections.emptyList();
      kings_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < resources_.size(); i++) {
        output.writeMessage(1, resources_.get(i));
      }
      for (int i = 0; i < kings_.size(); i++) {
        output.writeMessage(2, kings_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < resources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, resources_.get(i));
      }
      for (int i = 0; i < kings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, kings_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetObjectsResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResourcesFieldBuilder();
          getKingsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (resourcesBuilder_ == null) {
          resources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          resourcesBuilder_.clear();
        }
        if (kingsBuilder_ == null) {
          kings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          kingsBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse result = new vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse(this);
        int from_bitField0_ = bitField0_;
        if (resourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            resources_ = java.util.Collections.unmodifiableList(resources_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.resources_ = resources_;
        } else {
          result.resources_ = resourcesBuilder_.build();
        }
        if (kingsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            kings_ = java.util.Collections.unmodifiableList(kings_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.kings_ = kings_;
        } else {
          result.kings_ = kingsBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse.getDefaultInstance()) return this;
        if (resourcesBuilder_ == null) {
          if (!other.resources_.isEmpty()) {
            if (resources_.isEmpty()) {
              resources_ = other.resources_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureResourcesIsMutable();
              resources_.addAll(other.resources_);
            }
            onChanged();
          }
        } else {
          if (!other.resources_.isEmpty()) {
            if (resourcesBuilder_.isEmpty()) {
              resourcesBuilder_.dispose();
              resourcesBuilder_ = null;
              resources_ = other.resources_;
              bitField0_ = (bitField0_ & ~0x00000001);
              resourcesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getResourcesFieldBuilder() : null;
            } else {
              resourcesBuilder_.addAllMessages(other.resources_);
            }
          }
        }
        if (kingsBuilder_ == null) {
          if (!other.kings_.isEmpty()) {
            if (kings_.isEmpty()) {
              kings_ = other.kings_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureKingsIsMutable();
              kings_.addAll(other.kings_);
            }
            onChanged();
          }
        } else {
          if (!other.kings_.isEmpty()) {
            if (kingsBuilder_.isEmpty()) {
              kingsBuilder_.dispose();
              kingsBuilder_ = null;
              kings_ = other.kings_;
              bitField0_ = (bitField0_ & ~0x00000002);
              kingsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getKingsFieldBuilder() : null;
            } else {
              kingsBuilder_.addAllMessages(other.kings_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addResources(subBuilder.buildPartial());
              break;
            }
            case 18: {
              vsu.alivechess.net.commands.AliveChessProtos.King.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.King.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addKings(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .tutorial.Resource resources = 1;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> resources_ =
        java.util.Collections.emptyList();
      private void ensureResourcesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          resources_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.Resource>(resources_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> resourcesBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource> getResourcesList() {
        if (resourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(resources_);
        } else {
          return resourcesBuilder_.getMessageList();
        }
      }
      public int getResourcesCount() {
        if (resourcesBuilder_ == null) {
          return resources_.size();
        } else {
          return resourcesBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource getResources(int index) {
        if (resourcesBuilder_ == null) {
          return resources_.get(index);
        } else {
          return resourcesBuilder_.getMessage(index);
        }
      }
      public Builder setResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.set(index, value);
          onChanged();
        } else {
          resourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.set(index, builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addResources(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.add(value);
          onChanged();
        } else {
          resourcesBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.add(index, value);
          onChanged();
        } else {
          resourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addResources(
          vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.add(builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addResources(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.add(index, builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllResources(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.Resource> values) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          super.addAll(values, resources_);
          onChanged();
        } else {
          resourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearResources() {
        if (resourcesBuilder_ == null) {
          resources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          resourcesBuilder_.clear();
        }
        return this;
      }
      public Builder removeResources(int index) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.remove(index);
          onChanged();
        } else {
          resourcesBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder getResourcesBuilder(
          int index) {
        return getResourcesFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourcesOrBuilder(
          int index) {
        if (resourcesBuilder_ == null) {
          return resources_.get(index);  } else {
          return resourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
           getResourcesOrBuilderList() {
        if (resourcesBuilder_ != null) {
          return resourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(resources_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder addResourcesBuilder() {
        return getResourcesFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder addResourcesBuilder(
          int index) {
        return getResourcesFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder> 
           getResourcesBuilderList() {
        return getResourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
          getResourcesFieldBuilder() {
        if (resourcesBuilder_ == null) {
          resourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder>(
                  resources_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          resources_ = null;
        }
        return resourcesBuilder_;
      }
      
      // repeated .tutorial.King kings = 2;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.King> kings_ =
        java.util.Collections.emptyList();
      private void ensureKingsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          kings_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.King>(kings_);
          bitField0_ |= 0x00000002;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> kingsBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.King> getKingsList() {
        if (kingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(kings_);
        } else {
          return kingsBuilder_.getMessageList();
        }
      }
      public int getKingsCount() {
        if (kingsBuilder_ == null) {
          return kings_.size();
        } else {
          return kingsBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King getKings(int index) {
        if (kingsBuilder_ == null) {
          return kings_.get(index);
        } else {
          return kingsBuilder_.getMessage(index);
        }
      }
      public Builder setKings(
          int index, vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (kingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKingsIsMutable();
          kings_.set(index, value);
          onChanged();
        } else {
          kingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setKings(
          int index, vsu.alivechess.net.commands.AliveChessProtos.King.Builder builderForValue) {
        if (kingsBuilder_ == null) {
          ensureKingsIsMutable();
          kings_.set(index, builderForValue.build());
          onChanged();
        } else {
          kingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addKings(vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (kingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKingsIsMutable();
          kings_.add(value);
          onChanged();
        } else {
          kingsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addKings(
          int index, vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (kingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKingsIsMutable();
          kings_.add(index, value);
          onChanged();
        } else {
          kingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addKings(
          vsu.alivechess.net.commands.AliveChessProtos.King.Builder builderForValue) {
        if (kingsBuilder_ == null) {
          ensureKingsIsMutable();
          kings_.add(builderForValue.build());
          onChanged();
        } else {
          kingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addKings(
          int index, vsu.alivechess.net.commands.AliveChessProtos.King.Builder builderForValue) {
        if (kingsBuilder_ == null) {
          ensureKingsIsMutable();
          kings_.add(index, builderForValue.build());
          onChanged();
        } else {
          kingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllKings(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.King> values) {
        if (kingsBuilder_ == null) {
          ensureKingsIsMutable();
          super.addAll(values, kings_);
          onChanged();
        } else {
          kingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearKings() {
        if (kingsBuilder_ == null) {
          kings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          kingsBuilder_.clear();
        }
        return this;
      }
      public Builder removeKings(int index) {
        if (kingsBuilder_ == null) {
          ensureKingsIsMutable();
          kings_.remove(index);
          onChanged();
        } else {
          kingsBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King.Builder getKingsBuilder(
          int index) {
        return getKingsFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getKingsOrBuilder(
          int index) {
        if (kingsBuilder_ == null) {
          return kings_.get(index);  } else {
          return kingsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> 
           getKingsOrBuilderList() {
        if (kingsBuilder_ != null) {
          return kingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(kings_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King.Builder addKingsBuilder() {
        return getKingsFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King.Builder addKingsBuilder(
          int index) {
        return getKingsFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.King.Builder> 
           getKingsBuilderList() {
        return getKingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> 
          getKingsFieldBuilder() {
        if (kingsBuilder_ == null) {
          kingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder>(
                  kings_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          kings_ = null;
        }
        return kingsBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetObjectsResponse)
    }
    
    static {
      defaultInstance = new GetObjectsResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetObjectsResponse)
  }
  
  public interface SingleObjectOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 singleObjectId = 1;
    boolean hasSingleObjectId();
    int getSingleObjectId();
    
    // required int32 x = 2;
    boolean hasX();
    int getX();
    
    // required int32 y = 3;
    boolean hasY();
    int getY();
    
    // optional .tutorial.SingleObjectType singleObjectType = 4;
    boolean hasSingleObjectType();
    vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType getSingleObjectType();
    
    // optional float wayCost = 5;
    boolean hasWayCost();
    float getWayCost();
  }
  public static final class SingleObject extends
      com.google.protobuf.GeneratedMessage
      implements SingleObjectOrBuilder {
    // Use SingleObject.newBuilder() to construct.
    private SingleObject(Builder builder) {
      super(builder);
    }
    private SingleObject(boolean noInit) {}
    
    private static final SingleObject defaultInstance;
    public static SingleObject getDefaultInstance() {
      return defaultInstance;
    }
    
    public SingleObject getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_SingleObject_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_SingleObject_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 singleObjectId = 1;
    public static final int SINGLEOBJECTID_FIELD_NUMBER = 1;
    private int singleObjectId_;
    public boolean hasSingleObjectId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getSingleObjectId() {
      return singleObjectId_;
    }
    
    // required int32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getX() {
      return x_;
    }
    
    // required int32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getY() {
      return y_;
    }
    
    // optional .tutorial.SingleObjectType singleObjectType = 4;
    public static final int SINGLEOBJECTTYPE_FIELD_NUMBER = 4;
    private vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType singleObjectType_;
    public boolean hasSingleObjectType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType getSingleObjectType() {
      return singleObjectType_;
    }
    
    // optional float wayCost = 5;
    public static final int WAYCOST_FIELD_NUMBER = 5;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    private void initFields() {
      singleObjectId_ = 0;
      x_ = 0;
      y_ = 0;
      singleObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType.Tree;
      wayCost_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasSingleObjectId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, singleObjectId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, singleObjectType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, wayCost_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, singleObjectId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, singleObjectType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, wayCost_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.SingleObject parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.SingleObject prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.SingleObjectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_SingleObject_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_SingleObject_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.SingleObject.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        singleObjectId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        singleObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType.Tree;
        bitField0_ = (bitField0_ & ~0x00000008);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.SingleObject.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.SingleObject.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject build() {
        vsu.alivechess.net.commands.AliveChessProtos.SingleObject result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.SingleObject buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.SingleObject result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObject buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.SingleObject result = new vsu.alivechess.net.commands.AliveChessProtos.SingleObject(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.singleObjectId_ = singleObjectId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.singleObjectType_ = singleObjectType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.wayCost_ = wayCost_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.SingleObject) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.SingleObject)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.SingleObject other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.SingleObject.getDefaultInstance()) return this;
        if (other.hasSingleObjectId()) {
          setSingleObjectId(other.getSingleObjectId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasSingleObjectType()) {
          setSingleObjectType(other.getSingleObjectType());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasSingleObjectId()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              singleObjectId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              x_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              y_ = input.readInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType value = vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                singleObjectType_ = value;
              }
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              wayCost_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 singleObjectId = 1;
      private int singleObjectId_ ;
      public boolean hasSingleObjectId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getSingleObjectId() {
        return singleObjectId_;
      }
      public Builder setSingleObjectId(int value) {
        bitField0_ |= 0x00000001;
        singleObjectId_ = value;
        onChanged();
        return this;
      }
      public Builder clearSingleObjectId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        singleObjectId_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 x = 2;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 y = 3;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // optional .tutorial.SingleObjectType singleObjectType = 4;
      private vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType singleObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType.Tree;
      public boolean hasSingleObjectType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType getSingleObjectType() {
        return singleObjectType_;
      }
      public Builder setSingleObjectType(vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        singleObjectType_ = value;
        onChanged();
        return this;
      }
      public Builder clearSingleObjectType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        singleObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.SingleObjectType.Tree;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 5;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000010;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000010);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.SingleObject)
    }
    
    static {
      defaultInstance = new SingleObject(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.SingleObject)
  }
  
  public interface MultyObjectOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 multyObjectId = 1;
    boolean hasMultyObjectId();
    int getMultyObjectId();
    
    // required int32 leftX = 2;
    boolean hasLeftX();
    int getLeftX();
    
    // required int32 topY = 3;
    boolean hasTopY();
    int getTopY();
    
    // required int32 width = 4;
    boolean hasWidth();
    int getWidth();
    
    // required int32 height = 5;
    boolean hasHeight();
    int getHeight();
    
    // optional float wayCost = 6;
    boolean hasWayCost();
    float getWayCost();
    
    // optional .tutorial.MultyObjectTypes multyObjectType = 7;
    boolean hasMultyObjectType();
    vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes getMultyObjectType();
  }
  public static final class MultyObject extends
      com.google.protobuf.GeneratedMessage
      implements MultyObjectOrBuilder {
    // Use MultyObject.newBuilder() to construct.
    private MultyObject(Builder builder) {
      super(builder);
    }
    private MultyObject(boolean noInit) {}
    
    private static final MultyObject defaultInstance;
    public static MultyObject getDefaultInstance() {
      return defaultInstance;
    }
    
    public MultyObject getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MultyObject_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MultyObject_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 multyObjectId = 1;
    public static final int MULTYOBJECTID_FIELD_NUMBER = 1;
    private int multyObjectId_;
    public boolean hasMultyObjectId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getMultyObjectId() {
      return multyObjectId_;
    }
    
    // required int32 leftX = 2;
    public static final int LEFTX_FIELD_NUMBER = 2;
    private int leftX_;
    public boolean hasLeftX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getLeftX() {
      return leftX_;
    }
    
    // required int32 topY = 3;
    public static final int TOPY_FIELD_NUMBER = 3;
    private int topY_;
    public boolean hasTopY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getTopY() {
      return topY_;
    }
    
    // required int32 width = 4;
    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getWidth() {
      return width_;
    }
    
    // required int32 height = 5;
    public static final int HEIGHT_FIELD_NUMBER = 5;
    private int height_;
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getHeight() {
      return height_;
    }
    
    // optional float wayCost = 6;
    public static final int WAYCOST_FIELD_NUMBER = 6;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    // optional .tutorial.MultyObjectTypes multyObjectType = 7;
    public static final int MULTYOBJECTTYPE_FIELD_NUMBER = 7;
    private vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes multyObjectType_;
    public boolean hasMultyObjectType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes getMultyObjectType() {
      return multyObjectType_;
    }
    
    private void initFields() {
      multyObjectId_ = 0;
      leftX_ = 0;
      topY_ = 0;
      width_ = 0;
      height_ = 0;
      wayCost_ = 0F;
      multyObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes.Rock;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMultyObjectId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLeftX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTopY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, multyObjectId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, leftX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, topY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, width_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, height_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, wayCost_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, multyObjectType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, multyObjectId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, leftX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, topY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, width_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, height_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, wayCost_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, multyObjectType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MultyObject parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.MultyObject prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.MultyObjectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MultyObject_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MultyObject_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.MultyObject.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        multyObjectId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        leftX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        topY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        multyObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes.Rock;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.MultyObject.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.MultyObject.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject build() {
        vsu.alivechess.net.commands.AliveChessProtos.MultyObject result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.MultyObject buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.MultyObject result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObject buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.MultyObject result = new vsu.alivechess.net.commands.AliveChessProtos.MultyObject(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.multyObjectId_ = multyObjectId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.leftX_ = leftX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.topY_ = topY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.wayCost_ = wayCost_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.multyObjectType_ = multyObjectType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.MultyObject) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.MultyObject)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.MultyObject other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.MultyObject.getDefaultInstance()) return this;
        if (other.hasMultyObjectId()) {
          setMultyObjectId(other.getMultyObjectId());
        }
        if (other.hasLeftX()) {
          setLeftX(other.getLeftX());
        }
        if (other.hasTopY()) {
          setTopY(other.getTopY());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        if (other.hasMultyObjectType()) {
          setMultyObjectType(other.getMultyObjectType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMultyObjectId()) {
          
          return false;
        }
        if (!hasLeftX()) {
          
          return false;
        }
        if (!hasTopY()) {
          
          return false;
        }
        if (!hasWidth()) {
          
          return false;
        }
        if (!hasHeight()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              multyObjectId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              leftX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              topY_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              height_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              wayCost_ = input.readFloat();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes value = vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                multyObjectType_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 multyObjectId = 1;
      private int multyObjectId_ ;
      public boolean hasMultyObjectId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getMultyObjectId() {
        return multyObjectId_;
      }
      public Builder setMultyObjectId(int value) {
        bitField0_ |= 0x00000001;
        multyObjectId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMultyObjectId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        multyObjectId_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 leftX = 2;
      private int leftX_ ;
      public boolean hasLeftX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getLeftX() {
        return leftX_;
      }
      public Builder setLeftX(int value) {
        bitField0_ |= 0x00000002;
        leftX_ = value;
        onChanged();
        return this;
      }
      public Builder clearLeftX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        leftX_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 topY = 3;
      private int topY_ ;
      public boolean hasTopY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getTopY() {
        return topY_;
      }
      public Builder setTopY(int value) {
        bitField0_ |= 0x00000004;
        topY_ = value;
        onChanged();
        return this;
      }
      public Builder clearTopY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        topY_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 width = 4;
      private int width_ ;
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getWidth() {
        return width_;
      }
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 height = 5;
      private int height_ ;
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getHeight() {
        return height_;
      }
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000010;
        height_ = value;
        onChanged();
        return this;
      }
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        height_ = 0;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 6;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000020;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000020);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // optional .tutorial.MultyObjectTypes multyObjectType = 7;
      private vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes multyObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes.Rock;
      public boolean hasMultyObjectType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes getMultyObjectType() {
        return multyObjectType_;
      }
      public Builder setMultyObjectType(vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        multyObjectType_ = value;
        onChanged();
        return this;
      }
      public Builder clearMultyObjectType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        multyObjectType_ = vsu.alivechess.net.commands.AliveChessProtos.MultyObjectTypes.Rock;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.MultyObject)
    }
    
    static {
      defaultInstance = new MultyObject(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.MultyObject)
  }
  
  public interface BorderOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 borderId = 1;
    boolean hasBorderId();
    int getBorderId();
    
    // required int32 x = 2;
    boolean hasX();
    int getX();
    
    // required int32 y = 3;
    boolean hasY();
    int getY();
    
    // optional float wayCost = 4;
    boolean hasWayCost();
    float getWayCost();
  }
  public static final class Border extends
      com.google.protobuf.GeneratedMessage
      implements BorderOrBuilder {
    // Use Border.newBuilder() to construct.
    private Border(Builder builder) {
      super(builder);
    }
    private Border(boolean noInit) {}
    
    private static final Border defaultInstance;
    public static Border getDefaultInstance() {
      return defaultInstance;
    }
    
    public Border getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Border_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Border_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 borderId = 1;
    public static final int BORDERID_FIELD_NUMBER = 1;
    private int borderId_;
    public boolean hasBorderId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getBorderId() {
      return borderId_;
    }
    
    // required int32 x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getX() {
      return x_;
    }
    
    // required int32 y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getY() {
      return y_;
    }
    
    // optional float wayCost = 4;
    public static final int WAYCOST_FIELD_NUMBER = 4;
    private float wayCost_;
    public boolean hasWayCost() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public float getWayCost() {
      return wayCost_;
    }
    
    private void initFields() {
      borderId_ = 0;
      x_ = 0;
      y_ = 0;
      wayCost_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasBorderId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, borderId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, wayCost_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, borderId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, wayCost_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Border parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.Border prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.BorderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Border_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Border_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.Border.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        borderId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        wayCost_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Border.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Border getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Border.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Border build() {
        vsu.alivechess.net.commands.AliveChessProtos.Border result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.Border buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.Border result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Border buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.Border result = new vsu.alivechess.net.commands.AliveChessProtos.Border(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.borderId_ = borderId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.wayCost_ = wayCost_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.Border) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.Border)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.Border other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.Border.getDefaultInstance()) return this;
        if (other.hasBorderId()) {
          setBorderId(other.getBorderId());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasWayCost()) {
          setWayCost(other.getWayCost());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasBorderId()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              borderId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              x_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              y_ = input.readInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              wayCost_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 borderId = 1;
      private int borderId_ ;
      public boolean hasBorderId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getBorderId() {
        return borderId_;
      }
      public Builder setBorderId(int value) {
        bitField0_ |= 0x00000001;
        borderId_ = value;
        onChanged();
        return this;
      }
      public Builder clearBorderId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        borderId_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 x = 2;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 y = 3;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // optional float wayCost = 4;
      private float wayCost_ ;
      public boolean hasWayCost() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public float getWayCost() {
        return wayCost_;
      }
      public Builder setWayCost(float value) {
        bitField0_ |= 0x00000008;
        wayCost_ = value;
        onChanged();
        return this;
      }
      public Builder clearWayCost() {
        bitField0_ = (bitField0_ & ~0x00000008);
        wayCost_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.Border)
    }
    
    static {
      defaultInstance = new Border(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.Border)
  }
  
  public interface MoveKingRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 x = 1;
    boolean hasX();
    int getX();
    
    // optional int32 y = 2;
    boolean hasY();
    int getY();
  }
  public static final class MoveKingRequest extends
      com.google.protobuf.GeneratedMessage
      implements MoveKingRequestOrBuilder {
    // Use MoveKingRequest.newBuilder() to construct.
    private MoveKingRequest(Builder builder) {
      super(builder);
    }
    private MoveKingRequest(boolean noInit) {}
    
    private static final MoveKingRequest defaultInstance;
    public static MoveKingRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public MoveKingRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getX() {
      return x_;
    }
    
    // optional int32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getY() {
      return y_;
    }
    
    private void initFields() {
      x_ = 0;
      y_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, y_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, y_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest result = new vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 x = 1;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 y = 2;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.MoveKingRequest)
    }
    
    static {
      defaultInstance = new MoveKingRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.MoveKingRequest)
  }
  
  public interface MoveKingResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .tutorial.Position steps = 1;
    java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Position> 
        getStepsList();
    vsu.alivechess.net.commands.AliveChessProtos.Position getSteps(int index);
    int getStepsCount();
    java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder> 
        getStepsOrBuilderList();
    vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder getStepsOrBuilder(
        int index);
  }
  public static final class MoveKingResponse extends
      com.google.protobuf.GeneratedMessage
      implements MoveKingResponseOrBuilder {
    // Use MoveKingResponse.newBuilder() to construct.
    private MoveKingResponse(Builder builder) {
      super(builder);
    }
    private MoveKingResponse(boolean noInit) {}
    
    private static final MoveKingResponse defaultInstance;
    public static MoveKingResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public MoveKingResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingResponse_fieldAccessorTable;
    }
    
    // repeated .tutorial.Position steps = 1;
    public static final int STEPS_FIELD_NUMBER = 1;
    private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Position> steps_;
    public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Position> getStepsList() {
      return steps_;
    }
    public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder> 
        getStepsOrBuilderList() {
      return steps_;
    }
    public int getStepsCount() {
      return steps_.size();
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Position getSteps(int index) {
      return steps_.get(index);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder getStepsOrBuilder(
        int index) {
      return steps_.get(index);
    }
    
    private void initFields() {
      steps_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < steps_.size(); i++) {
        output.writeMessage(1, steps_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < steps_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, steps_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_MoveKingResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStepsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (stepsBuilder_ == null) {
          steps_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          stepsBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse result = new vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse(this);
        int from_bitField0_ = bitField0_;
        if (stepsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            steps_ = java.util.Collections.unmodifiableList(steps_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.steps_ = steps_;
        } else {
          result.steps_ = stepsBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse.getDefaultInstance()) return this;
        if (stepsBuilder_ == null) {
          if (!other.steps_.isEmpty()) {
            if (steps_.isEmpty()) {
              steps_ = other.steps_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureStepsIsMutable();
              steps_.addAll(other.steps_);
            }
            onChanged();
          }
        } else {
          if (!other.steps_.isEmpty()) {
            if (stepsBuilder_.isEmpty()) {
              stepsBuilder_.dispose();
              stepsBuilder_ = null;
              steps_ = other.steps_;
              bitField0_ = (bitField0_ & ~0x00000001);
              stepsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getStepsFieldBuilder() : null;
            } else {
              stepsBuilder_.addAllMessages(other.steps_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Position.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Position.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSteps(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .tutorial.Position steps = 1;
      private java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Position> steps_ =
        java.util.Collections.emptyList();
      private void ensureStepsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          steps_ = new java.util.ArrayList<vsu.alivechess.net.commands.AliveChessProtos.Position>(steps_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Position, vsu.alivechess.net.commands.AliveChessProtos.Position.Builder, vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder> stepsBuilder_;
      
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Position> getStepsList() {
        if (stepsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(steps_);
        } else {
          return stepsBuilder_.getMessageList();
        }
      }
      public int getStepsCount() {
        if (stepsBuilder_ == null) {
          return steps_.size();
        } else {
          return stepsBuilder_.getCount();
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Position getSteps(int index) {
        if (stepsBuilder_ == null) {
          return steps_.get(index);
        } else {
          return stepsBuilder_.getMessage(index);
        }
      }
      public Builder setSteps(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Position value) {
        if (stepsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStepsIsMutable();
          steps_.set(index, value);
          onChanged();
        } else {
          stepsBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setSteps(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Position.Builder builderForValue) {
        if (stepsBuilder_ == null) {
          ensureStepsIsMutable();
          steps_.set(index, builderForValue.build());
          onChanged();
        } else {
          stepsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addSteps(vsu.alivechess.net.commands.AliveChessProtos.Position value) {
        if (stepsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStepsIsMutable();
          steps_.add(value);
          onChanged();
        } else {
          stepsBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addSteps(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Position value) {
        if (stepsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStepsIsMutable();
          steps_.add(index, value);
          onChanged();
        } else {
          stepsBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addSteps(
          vsu.alivechess.net.commands.AliveChessProtos.Position.Builder builderForValue) {
        if (stepsBuilder_ == null) {
          ensureStepsIsMutable();
          steps_.add(builderForValue.build());
          onChanged();
        } else {
          stepsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addSteps(
          int index, vsu.alivechess.net.commands.AliveChessProtos.Position.Builder builderForValue) {
        if (stepsBuilder_ == null) {
          ensureStepsIsMutable();
          steps_.add(index, builderForValue.build());
          onChanged();
        } else {
          stepsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllSteps(
          java.lang.Iterable<? extends vsu.alivechess.net.commands.AliveChessProtos.Position> values) {
        if (stepsBuilder_ == null) {
          ensureStepsIsMutable();
          super.addAll(values, steps_);
          onChanged();
        } else {
          stepsBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearSteps() {
        if (stepsBuilder_ == null) {
          steps_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          stepsBuilder_.clear();
        }
        return this;
      }
      public Builder removeSteps(int index) {
        if (stepsBuilder_ == null) {
          ensureStepsIsMutable();
          steps_.remove(index);
          onChanged();
        } else {
          stepsBuilder_.remove(index);
        }
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Position.Builder getStepsBuilder(
          int index) {
        return getStepsFieldBuilder().getBuilder(index);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder getStepsOrBuilder(
          int index) {
        if (stepsBuilder_ == null) {
          return steps_.get(index);  } else {
          return stepsBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder> 
           getStepsOrBuilderList() {
        if (stepsBuilder_ != null) {
          return stepsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(steps_);
        }
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Position.Builder addStepsBuilder() {
        return getStepsFieldBuilder().addBuilder(
            vsu.alivechess.net.commands.AliveChessProtos.Position.getDefaultInstance());
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Position.Builder addStepsBuilder(
          int index) {
        return getStepsFieldBuilder().addBuilder(
            index, vsu.alivechess.net.commands.AliveChessProtos.Position.getDefaultInstance());
      }
      public java.util.List<vsu.alivechess.net.commands.AliveChessProtos.Position.Builder> 
           getStepsBuilderList() {
        return getStepsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Position, vsu.alivechess.net.commands.AliveChessProtos.Position.Builder, vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder> 
          getStepsFieldBuilder() {
        if (stepsBuilder_ == null) {
          stepsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Position, vsu.alivechess.net.commands.AliveChessProtos.Position.Builder, vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder>(
                  steps_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          steps_ = null;
        }
        return stepsBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.MoveKingResponse)
    }
    
    static {
      defaultInstance = new MoveKingResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.MoveKingResponse)
  }
  
  public interface PositionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 x = 1;
    boolean hasX();
    int getX();
    
    // optional int32 y = 2;
    boolean hasY();
    int getY();
  }
  public static final class Position extends
      com.google.protobuf.GeneratedMessage
      implements PositionOrBuilder {
    // Use Position.newBuilder() to construct.
    private Position(Builder builder) {
      super(builder);
    }
    private Position(boolean noInit) {}
    
    private static final Position defaultInstance;
    public static Position getDefaultInstance() {
      return defaultInstance;
    }
    
    public Position getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Position_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Position_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getX() {
      return x_;
    }
    
    // optional int32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getY() {
      return y_;
    }
    
    private void initFields() {
      x_ = 0;
      y_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, y_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, y_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Position parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.Position prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.PositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Position_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Position_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.Position.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Position.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Position getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Position.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Position build() {
        vsu.alivechess.net.commands.AliveChessProtos.Position result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.Position buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.Position result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Position buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.Position result = new vsu.alivechess.net.commands.AliveChessProtos.Position(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.Position) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.Position)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.Position other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.Position.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 x = 1;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }
      
      // optional int32 y = 2;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.Position)
    }
    
    static {
      defaultInstance = new Position(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.Position)
  }
  
  public interface CaptureCastleRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 castleId = 1;
    boolean hasCastleId();
    int getCastleId();
  }
  public static final class CaptureCastleRequest extends
      com.google.protobuf.GeneratedMessage
      implements CaptureCastleRequestOrBuilder {
    // Use CaptureCastleRequest.newBuilder() to construct.
    private CaptureCastleRequest(Builder builder) {
      super(builder);
    }
    private CaptureCastleRequest(boolean noInit) {}
    
    private static final CaptureCastleRequest defaultInstance;
    public static CaptureCastleRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public CaptureCastleRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 castleId = 1;
    public static final int CASTLEID_FIELD_NUMBER = 1;
    private int castleId_;
    public boolean hasCastleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCastleId() {
      return castleId_;
    }
    
    private void initFields() {
      castleId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCastleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, castleId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, castleId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        castleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest result = new vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.castleId_ = castleId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest.getDefaultInstance()) return this;
        if (other.hasCastleId()) {
          setCastleId(other.getCastleId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCastleId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              castleId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 castleId = 1;
      private int castleId_ ;
      public boolean hasCastleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCastleId() {
        return castleId_;
      }
      public Builder setCastleId(int value) {
        bitField0_ |= 0x00000001;
        castleId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCastleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        castleId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.CaptureCastleRequest)
    }
    
    static {
      defaultInstance = new CaptureCastleRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.CaptureCastleRequest)
  }
  
  public interface CaptureCastleResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .tutorial.Castle castle = 1;
    boolean hasCastle();
    vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle();
    vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder();
  }
  public static final class CaptureCastleResponse extends
      com.google.protobuf.GeneratedMessage
      implements CaptureCastleResponseOrBuilder {
    // Use CaptureCastleResponse.newBuilder() to construct.
    private CaptureCastleResponse(Builder builder) {
      super(builder);
    }
    private CaptureCastleResponse(boolean noInit) {}
    
    private static final CaptureCastleResponse defaultInstance;
    public static CaptureCastleResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public CaptureCastleResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .tutorial.Castle castle = 1;
    public static final int CASTLE_FIELD_NUMBER = 1;
    private vsu.alivechess.net.commands.AliveChessProtos.Castle castle_;
    public boolean hasCastle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle() {
      return castle_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder() {
      return castle_;
    }
    
    private void initFields() {
      castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasCastle()) {
        if (!getCastle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, castle_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, castle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureCastleResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCastleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (castleBuilder_ == null) {
          castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse result = new vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (castleBuilder_ == null) {
          result.castle_ = castle_;
        } else {
          result.castle_ = castleBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse.getDefaultInstance()) return this;
        if (other.hasCastle()) {
          mergeCastle(other.getCastle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasCastle()) {
          if (!getCastle().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder();
              if (hasCastle()) {
                subBuilder.mergeFrom(getCastle());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCastle(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .tutorial.Castle castle = 1;
      private vsu.alivechess.net.commands.AliveChessProtos.Castle castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> castleBuilder_;
      public boolean hasCastle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle() {
        if (castleBuilder_ == null) {
          return castle_;
        } else {
          return castleBuilder_.getMessage();
        }
      }
      public Builder setCastle(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          castle_ = value;
          onChanged();
        } else {
          castleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setCastle(
          vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder builderForValue) {
        if (castleBuilder_ == null) {
          castle_ = builderForValue.build();
          onChanged();
        } else {
          castleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeCastle(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castleBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              castle_ != vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance()) {
            castle_ =
              vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder(castle_).mergeFrom(value).buildPartial();
          } else {
            castle_ = value;
          }
          onChanged();
        } else {
          castleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearCastle() {
        if (castleBuilder_ == null) {
          castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
          onChanged();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder getCastleBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCastleFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder() {
        if (castleBuilder_ != null) {
          return castleBuilder_.getMessageOrBuilder();
        } else {
          return castle_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
          getCastleFieldBuilder() {
        if (castleBuilder_ == null) {
          castleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder>(
                  castle_,
                  getParentForChildren(),
                  isClean());
          castle_ = null;
        }
        return castleBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.CaptureCastleResponse)
    }
    
    static {
      defaultInstance = new CaptureCastleResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.CaptureCastleResponse)
  }
  
  public interface CaptureMineRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 mineId = 1;
    boolean hasMineId();
    int getMineId();
  }
  public static final class CaptureMineRequest extends
      com.google.protobuf.GeneratedMessage
      implements CaptureMineRequestOrBuilder {
    // Use CaptureMineRequest.newBuilder() to construct.
    private CaptureMineRequest(Builder builder) {
      super(builder);
    }
    private CaptureMineRequest(boolean noInit) {}
    
    private static final CaptureMineRequest defaultInstance;
    public static CaptureMineRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public CaptureMineRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 mineId = 1;
    public static final int MINEID_FIELD_NUMBER = 1;
    private int mineId_;
    public boolean hasMineId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getMineId() {
      return mineId_;
    }
    
    private void initFields() {
      mineId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMineId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mineId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mineId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        mineId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest result = new vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mineId_ = mineId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest.getDefaultInstance()) return this;
        if (other.hasMineId()) {
          setMineId(other.getMineId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMineId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mineId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 mineId = 1;
      private int mineId_ ;
      public boolean hasMineId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getMineId() {
        return mineId_;
      }
      public Builder setMineId(int value) {
        bitField0_ |= 0x00000001;
        mineId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMineId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mineId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.CaptureMineRequest)
    }
    
    static {
      defaultInstance = new CaptureMineRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.CaptureMineRequest)
  }
  
  public interface CaptureMineResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .tutorial.Mine mine = 1;
    boolean hasMine();
    vsu.alivechess.net.commands.AliveChessProtos.Mine getMine();
    vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder getMineOrBuilder();
  }
  public static final class CaptureMineResponse extends
      com.google.protobuf.GeneratedMessage
      implements CaptureMineResponseOrBuilder {
    // Use CaptureMineResponse.newBuilder() to construct.
    private CaptureMineResponse(Builder builder) {
      super(builder);
    }
    private CaptureMineResponse(boolean noInit) {}
    
    private static final CaptureMineResponse defaultInstance;
    public static CaptureMineResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public CaptureMineResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .tutorial.Mine mine = 1;
    public static final int MINE_FIELD_NUMBER = 1;
    private vsu.alivechess.net.commands.AliveChessProtos.Mine mine_;
    public boolean hasMine() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Mine getMine() {
      return mine_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder getMineOrBuilder() {
      return mine_;
    }
    
    private void initFields() {
      mine_ = vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasMine()) {
        if (!getMine().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, mine_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, mine_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_CaptureMineResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMineFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (mineBuilder_ == null) {
          mine_ = vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance();
        } else {
          mineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse result = new vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (mineBuilder_ == null) {
          result.mine_ = mine_;
        } else {
          result.mine_ = mineBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse.getDefaultInstance()) return this;
        if (other.hasMine()) {
          mergeMine(other.getMine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasMine()) {
          if (!getMine().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Mine.newBuilder();
              if (hasMine()) {
                subBuilder.mergeFrom(getMine());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMine(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .tutorial.Mine mine = 1;
      private vsu.alivechess.net.commands.AliveChessProtos.Mine mine_ = vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Mine, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder, vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> mineBuilder_;
      public boolean hasMine() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Mine getMine() {
        if (mineBuilder_ == null) {
          return mine_;
        } else {
          return mineBuilder_.getMessage();
        }
      }
      public Builder setMine(vsu.alivechess.net.commands.AliveChessProtos.Mine value) {
        if (mineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mine_ = value;
          onChanged();
        } else {
          mineBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setMine(
          vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder builderForValue) {
        if (mineBuilder_ == null) {
          mine_ = builderForValue.build();
          onChanged();
        } else {
          mineBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeMine(vsu.alivechess.net.commands.AliveChessProtos.Mine value) {
        if (mineBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              mine_ != vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance()) {
            mine_ =
              vsu.alivechess.net.commands.AliveChessProtos.Mine.newBuilder(mine_).mergeFrom(value).buildPartial();
          } else {
            mine_ = value;
          }
          onChanged();
        } else {
          mineBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearMine() {
        if (mineBuilder_ == null) {
          mine_ = vsu.alivechess.net.commands.AliveChessProtos.Mine.getDefaultInstance();
          onChanged();
        } else {
          mineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder getMineBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMineFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder getMineOrBuilder() {
        if (mineBuilder_ != null) {
          return mineBuilder_.getMessageOrBuilder();
        } else {
          return mine_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Mine, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder, vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder> 
          getMineFieldBuilder() {
        if (mineBuilder_ == null) {
          mineBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Mine, vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder, vsu.alivechess.net.commands.AliveChessProtos.MineOrBuilder>(
                  mine_,
                  getParentForChildren(),
                  isClean());
          mine_ = null;
        }
        return mineBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.CaptureMineResponse)
    }
    
    static {
      defaultInstance = new CaptureMineResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.CaptureMineResponse)
  }
  
  public interface ComeInCastleRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 castleId = 1;
    boolean hasCastleId();
    int getCastleId();
  }
  public static final class ComeInCastleRequest extends
      com.google.protobuf.GeneratedMessage
      implements ComeInCastleRequestOrBuilder {
    // Use ComeInCastleRequest.newBuilder() to construct.
    private ComeInCastleRequest(Builder builder) {
      super(builder);
    }
    private ComeInCastleRequest(boolean noInit) {}
    
    private static final ComeInCastleRequest defaultInstance;
    public static ComeInCastleRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public ComeInCastleRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 castleId = 1;
    public static final int CASTLEID_FIELD_NUMBER = 1;
    private int castleId_;
    public boolean hasCastleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCastleId() {
      return castleId_;
    }
    
    private void initFields() {
      castleId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCastleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, castleId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, castleId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        castleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest result = new vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.castleId_ = castleId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest.getDefaultInstance()) return this;
        if (other.hasCastleId()) {
          setCastleId(other.getCastleId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCastleId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              castleId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 castleId = 1;
      private int castleId_ ;
      public boolean hasCastleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCastleId() {
        return castleId_;
      }
      public Builder setCastleId(int value) {
        bitField0_ |= 0x00000001;
        castleId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCastleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        castleId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.ComeInCastleRequest)
    }
    
    static {
      defaultInstance = new ComeInCastleRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ComeInCastleRequest)
  }
  
  public interface ComeInCastleResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 castleId = 1;
    boolean hasCastleId();
    int getCastleId();
  }
  public static final class ComeInCastleResponse extends
      com.google.protobuf.GeneratedMessage
      implements ComeInCastleResponseOrBuilder {
    // Use ComeInCastleResponse.newBuilder() to construct.
    private ComeInCastleResponse(Builder builder) {
      super(builder);
    }
    private ComeInCastleResponse(boolean noInit) {}
    
    private static final ComeInCastleResponse defaultInstance;
    public static ComeInCastleResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public ComeInCastleResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 castleId = 1;
    public static final int CASTLEID_FIELD_NUMBER = 1;
    private int castleId_;
    public boolean hasCastleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCastleId() {
      return castleId_;
    }
    
    private void initFields() {
      castleId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, castleId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, castleId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ComeInCastleResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        castleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse result = new vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.castleId_ = castleId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse.getDefaultInstance()) return this;
        if (other.hasCastleId()) {
          setCastleId(other.getCastleId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              castleId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 castleId = 1;
      private int castleId_ ;
      public boolean hasCastleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCastleId() {
        return castleId_;
      }
      public Builder setCastleId(int value) {
        bitField0_ |= 0x00000001;
        castleId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCastleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        castleId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.ComeInCastleResponse)
    }
    
    static {
      defaultInstance = new ComeInCastleResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ComeInCastleResponse)
  }
  
  public interface ContactCastleRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 castleId = 1;
    boolean hasCastleId();
    int getCastleId();
  }
  public static final class ContactCastleRequest extends
      com.google.protobuf.GeneratedMessage
      implements ContactCastleRequestOrBuilder {
    // Use ContactCastleRequest.newBuilder() to construct.
    private ContactCastleRequest(Builder builder) {
      super(builder);
    }
    private ContactCastleRequest(boolean noInit) {}
    
    private static final ContactCastleRequest defaultInstance;
    public static ContactCastleRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public ContactCastleRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleRequest_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 castleId = 1;
    public static final int CASTLEID_FIELD_NUMBER = 1;
    private int castleId_;
    public boolean hasCastleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCastleId() {
      return castleId_;
    }
    
    private void initFields() {
      castleId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCastleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, castleId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, castleId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        castleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest result = new vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.castleId_ = castleId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest.getDefaultInstance()) return this;
        if (other.hasCastleId()) {
          setCastleId(other.getCastleId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCastleId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              castleId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 castleId = 1;
      private int castleId_ ;
      public boolean hasCastleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCastleId() {
        return castleId_;
      }
      public Builder setCastleId(int value) {
        bitField0_ |= 0x00000001;
        castleId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCastleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        castleId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.ContactCastleRequest)
    }
    
    static {
      defaultInstance = new ContactCastleRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ContactCastleRequest)
  }
  
  public interface ContactCastleResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .tutorial.Dialog dispute = 1;
    boolean hasDispute();
    vsu.alivechess.net.commands.AliveChessProtos.Dialog getDispute();
    vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder getDisputeOrBuilder();
    
    // required .tutorial.Castle castle = 2;
    boolean hasCastle();
    vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle();
    vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder();
  }
  public static final class ContactCastleResponse extends
      com.google.protobuf.GeneratedMessage
      implements ContactCastleResponseOrBuilder {
    // Use ContactCastleResponse.newBuilder() to construct.
    private ContactCastleResponse(Builder builder) {
      super(builder);
    }
    private ContactCastleResponse(boolean noInit) {}
    
    private static final ContactCastleResponse defaultInstance;
    public static ContactCastleResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public ContactCastleResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .tutorial.Dialog dispute = 1;
    public static final int DISPUTE_FIELD_NUMBER = 1;
    private vsu.alivechess.net.commands.AliveChessProtos.Dialog dispute_;
    public boolean hasDispute() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Dialog getDispute() {
      return dispute_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder getDisputeOrBuilder() {
      return dispute_;
    }
    
    // required .tutorial.Castle castle = 2;
    public static final int CASTLE_FIELD_NUMBER = 2;
    private vsu.alivechess.net.commands.AliveChessProtos.Castle castle_;
    public boolean hasCastle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle() {
      return castle_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder() {
      return castle_;
    }
    
    private void initFields() {
      dispute_ = vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance();
      castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasDispute()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCastle()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getCastle().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, dispute_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, castle_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dispute_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, castle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ContactCastleResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDisputeFieldBuilder();
          getCastleFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (disputeBuilder_ == null) {
          dispute_ = vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance();
        } else {
          disputeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (castleBuilder_ == null) {
          castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse result = new vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (disputeBuilder_ == null) {
          result.dispute_ = dispute_;
        } else {
          result.dispute_ = disputeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (castleBuilder_ == null) {
          result.castle_ = castle_;
        } else {
          result.castle_ = castleBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse.getDefaultInstance()) return this;
        if (other.hasDispute()) {
          mergeDispute(other.getDispute());
        }
        if (other.hasCastle()) {
          mergeCastle(other.getCastle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasDispute()) {
          
          return false;
        }
        if (!hasCastle()) {
          
          return false;
        }
        if (!getCastle().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Dialog.newBuilder();
              if (hasDispute()) {
                subBuilder.mergeFrom(getDispute());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDispute(subBuilder.buildPartial());
              break;
            }
            case 18: {
              vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder();
              if (hasCastle()) {
                subBuilder.mergeFrom(getCastle());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCastle(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .tutorial.Dialog dispute = 1;
      private vsu.alivechess.net.commands.AliveChessProtos.Dialog dispute_ = vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Dialog, vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder, vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder> disputeBuilder_;
      public boolean hasDispute() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Dialog getDispute() {
        if (disputeBuilder_ == null) {
          return dispute_;
        } else {
          return disputeBuilder_.getMessage();
        }
      }
      public Builder setDispute(vsu.alivechess.net.commands.AliveChessProtos.Dialog value) {
        if (disputeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dispute_ = value;
          onChanged();
        } else {
          disputeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setDispute(
          vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder builderForValue) {
        if (disputeBuilder_ == null) {
          dispute_ = builderForValue.build();
          onChanged();
        } else {
          disputeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeDispute(vsu.alivechess.net.commands.AliveChessProtos.Dialog value) {
        if (disputeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              dispute_ != vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance()) {
            dispute_ =
              vsu.alivechess.net.commands.AliveChessProtos.Dialog.newBuilder(dispute_).mergeFrom(value).buildPartial();
          } else {
            dispute_ = value;
          }
          onChanged();
        } else {
          disputeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearDispute() {
        if (disputeBuilder_ == null) {
          dispute_ = vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance();
          onChanged();
        } else {
          disputeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder getDisputeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDisputeFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder getDisputeOrBuilder() {
        if (disputeBuilder_ != null) {
          return disputeBuilder_.getMessageOrBuilder();
        } else {
          return dispute_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Dialog, vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder, vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder> 
          getDisputeFieldBuilder() {
        if (disputeBuilder_ == null) {
          disputeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Dialog, vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder, vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder>(
                  dispute_,
                  getParentForChildren(),
                  isClean());
          dispute_ = null;
        }
        return disputeBuilder_;
      }
      
      // required .tutorial.Castle castle = 2;
      private vsu.alivechess.net.commands.AliveChessProtos.Castle castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> castleBuilder_;
      public boolean hasCastle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle getCastle() {
        if (castleBuilder_ == null) {
          return castle_;
        } else {
          return castleBuilder_.getMessage();
        }
      }
      public Builder setCastle(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          castle_ = value;
          onChanged();
        } else {
          castleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setCastle(
          vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder builderForValue) {
        if (castleBuilder_ == null) {
          castle_ = builderForValue.build();
          onChanged();
        } else {
          castleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeCastle(vsu.alivechess.net.commands.AliveChessProtos.Castle value) {
        if (castleBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              castle_ != vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance()) {
            castle_ =
              vsu.alivechess.net.commands.AliveChessProtos.Castle.newBuilder(castle_).mergeFrom(value).buildPartial();
          } else {
            castle_ = value;
          }
          onChanged();
        } else {
          castleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearCastle() {
        if (castleBuilder_ == null) {
          castle_ = vsu.alivechess.net.commands.AliveChessProtos.Castle.getDefaultInstance();
          onChanged();
        } else {
          castleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder getCastleBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCastleFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder getCastleOrBuilder() {
        if (castleBuilder_ != null) {
          return castleBuilder_.getMessageOrBuilder();
        } else {
          return castle_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder> 
          getCastleFieldBuilder() {
        if (castleBuilder_ == null) {
          castleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Castle, vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder, vsu.alivechess.net.commands.AliveChessProtos.CastleOrBuilder>(
                  castle_,
                  getParentForChildren(),
                  isClean());
          castle_ = null;
        }
        return castleBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.ContactCastleResponse)
    }
    
    static {
      defaultInstance = new ContactCastleResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ContactCastleResponse)
  }
  
  public interface DialogOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional int32 id = 1;
    boolean hasId();
    int getId();
    
    // optional .tutorial.King respondent = 2;
    boolean hasRespondent();
    vsu.alivechess.net.commands.AliveChessProtos.King getRespondent();
    vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getRespondentOrBuilder();
    
    // optional bool yourStep = 3;
    boolean hasYourStep();
    boolean getYourStep();
  }
  public static final class Dialog extends
      com.google.protobuf.GeneratedMessage
      implements DialogOrBuilder {
    // Use Dialog.newBuilder() to construct.
    private Dialog(Builder builder) {
      super(builder);
    }
    private Dialog(boolean noInit) {}
    
    private static final Dialog defaultInstance;
    public static Dialog getDefaultInstance() {
      return defaultInstance;
    }
    
    public Dialog getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Dialog_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Dialog_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional int32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getId() {
      return id_;
    }
    
    // optional .tutorial.King respondent = 2;
    public static final int RESPONDENT_FIELD_NUMBER = 2;
    private vsu.alivechess.net.commands.AliveChessProtos.King respondent_;
    public boolean hasRespondent() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.King getRespondent() {
      return respondent_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getRespondentOrBuilder() {
      return respondent_;
    }
    
    // optional bool yourStep = 3;
    public static final int YOURSTEP_FIELD_NUMBER = 3;
    private boolean yourStep_;
    public boolean hasYourStep() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public boolean getYourStep() {
      return yourStep_;
    }
    
    private void initFields() {
      id_ = 0;
      respondent_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
      yourStep_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, respondent_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, yourStep_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, respondent_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, yourStep_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.Dialog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.Dialog prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.DialogOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Dialog_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_Dialog_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.Dialog.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRespondentFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (respondentBuilder_ == null) {
          respondent_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
        } else {
          respondentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        yourStep_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Dialog getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Dialog build() {
        vsu.alivechess.net.commands.AliveChessProtos.Dialog result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.Dialog buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.Dialog result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.Dialog buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.Dialog result = new vsu.alivechess.net.commands.AliveChessProtos.Dialog(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (respondentBuilder_ == null) {
          result.respondent_ = respondent_;
        } else {
          result.respondent_ = respondentBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.yourStep_ = yourStep_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.Dialog) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.Dialog)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.Dialog other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.Dialog.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasRespondent()) {
          mergeRespondent(other.getRespondent());
        }
        if (other.hasYourStep()) {
          setYourStep(other.getYourStep());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              vsu.alivechess.net.commands.AliveChessProtos.King.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.King.newBuilder();
              if (hasRespondent()) {
                subBuilder.mergeFrom(getRespondent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRespondent(subBuilder.buildPartial());
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              yourStep_ = input.readBool();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional int32 id = 1;
      private int id_ ;
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getId() {
        return id_;
      }
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }
      
      // optional .tutorial.King respondent = 2;
      private vsu.alivechess.net.commands.AliveChessProtos.King respondent_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> respondentBuilder_;
      public boolean hasRespondent() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King getRespondent() {
        if (respondentBuilder_ == null) {
          return respondent_;
        } else {
          return respondentBuilder_.getMessage();
        }
      }
      public Builder setRespondent(vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (respondentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          respondent_ = value;
          onChanged();
        } else {
          respondentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setRespondent(
          vsu.alivechess.net.commands.AliveChessProtos.King.Builder builderForValue) {
        if (respondentBuilder_ == null) {
          respondent_ = builderForValue.build();
          onChanged();
        } else {
          respondentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeRespondent(vsu.alivechess.net.commands.AliveChessProtos.King value) {
        if (respondentBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              respondent_ != vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance()) {
            respondent_ =
              vsu.alivechess.net.commands.AliveChessProtos.King.newBuilder(respondent_).mergeFrom(value).buildPartial();
          } else {
            respondent_ = value;
          }
          onChanged();
        } else {
          respondentBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearRespondent() {
        if (respondentBuilder_ == null) {
          respondent_ = vsu.alivechess.net.commands.AliveChessProtos.King.getDefaultInstance();
          onChanged();
        } else {
          respondentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.King.Builder getRespondentBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getRespondentFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder getRespondentOrBuilder() {
        if (respondentBuilder_ != null) {
          return respondentBuilder_.getMessageOrBuilder();
        } else {
          return respondent_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder> 
          getRespondentFieldBuilder() {
        if (respondentBuilder_ == null) {
          respondentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.King, vsu.alivechess.net.commands.AliveChessProtos.King.Builder, vsu.alivechess.net.commands.AliveChessProtos.KingOrBuilder>(
                  respondent_,
                  getParentForChildren(),
                  isClean());
          respondent_ = null;
        }
        return respondentBuilder_;
      }
      
      // optional bool yourStep = 3;
      private boolean yourStep_ ;
      public boolean hasYourStep() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public boolean getYourStep() {
        return yourStep_;
      }
      public Builder setYourStep(boolean value) {
        bitField0_ |= 0x00000004;
        yourStep_ = value;
        onChanged();
        return this;
      }
      public Builder clearYourStep() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yourStep_ = false;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.Dialog)
    }
    
    static {
      defaultInstance = new Dialog(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.Dialog)
  }
  
  public interface GetResourceMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .tutorial.Resource resource = 1;
    boolean hasResource();
    vsu.alivechess.net.commands.AliveChessProtos.Resource getResource();
    vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourceOrBuilder();
    
    // optional bool fromMine = 2;
    boolean hasFromMine();
    boolean getFromMine();
  }
  public static final class GetResourceMessage extends
      com.google.protobuf.GeneratedMessage
      implements GetResourceMessageOrBuilder {
    // Use GetResourceMessage.newBuilder() to construct.
    private GetResourceMessage(Builder builder) {
      super(builder);
    }
    private GetResourceMessage(boolean noInit) {}
    
    private static final GetResourceMessage defaultInstance;
    public static GetResourceMessage getDefaultInstance() {
      return defaultInstance;
    }
    
    public GetResourceMessage getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetResourceMessage_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetResourceMessage_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .tutorial.Resource resource = 1;
    public static final int RESOURCE_FIELD_NUMBER = 1;
    private vsu.alivechess.net.commands.AliveChessProtos.Resource resource_;
    public boolean hasResource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Resource getResource() {
      return resource_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourceOrBuilder() {
      return resource_;
    }
    
    // optional bool fromMine = 2;
    public static final int FROMMINE_FIELD_NUMBER = 2;
    private boolean fromMine_;
    public boolean hasFromMine() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public boolean getFromMine() {
      return fromMine_;
    }
    
    private void initFields() {
      resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
      fromMine_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResource()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, resource_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, fromMine_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, resource_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, fromMine_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetResourceMessage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_GetResourceMessage_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResourceFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (resourceBuilder_ == null) {
          resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
        } else {
          resourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        fromMine_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage build() {
        vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage result = new vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (resourceBuilder_ == null) {
          result.resource_ = resource_;
        } else {
          result.resource_ = resourceBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fromMine_ = fromMine_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage.getDefaultInstance()) return this;
        if (other.hasResource()) {
          mergeResource(other.getResource());
        }
        if (other.hasFromMine()) {
          setFromMine(other.getFromMine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResource()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder();
              if (hasResource()) {
                subBuilder.mergeFrom(getResource());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setResource(subBuilder.buildPartial());
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              fromMine_ = input.readBool();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .tutorial.Resource resource = 1;
      private vsu.alivechess.net.commands.AliveChessProtos.Resource resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> resourceBuilder_;
      public boolean hasResource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource getResource() {
        if (resourceBuilder_ == null) {
          return resource_;
        } else {
          return resourceBuilder_.getMessage();
        }
      }
      public Builder setResource(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resource_ = value;
          onChanged();
        } else {
          resourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setResource(
          vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (resourceBuilder_ == null) {
          resource_ = builderForValue.build();
          onChanged();
        } else {
          resourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeResource(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              resource_ != vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance()) {
            resource_ =
              vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder(resource_).mergeFrom(value).buildPartial();
          } else {
            resource_ = value;
          }
          onChanged();
        } else {
          resourceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearResource() {
        if (resourceBuilder_ == null) {
          resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
          onChanged();
        } else {
          resourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder getResourceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getResourceFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourceOrBuilder() {
        if (resourceBuilder_ != null) {
          return resourceBuilder_.getMessageOrBuilder();
        } else {
          return resource_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
          getResourceFieldBuilder() {
        if (resourceBuilder_ == null) {
          resourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder>(
                  resource_,
                  getParentForChildren(),
                  isClean());
          resource_ = null;
        }
        return resourceBuilder_;
      }
      
      // optional bool fromMine = 2;
      private boolean fromMine_ ;
      public boolean hasFromMine() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public boolean getFromMine() {
        return fromMine_;
      }
      public Builder setFromMine(boolean value) {
        bitField0_ |= 0x00000002;
        fromMine_ = value;
        onChanged();
        return this;
      }
      public Builder clearFromMine() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fromMine_ = false;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.GetResourceMessage)
    }
    
    static {
      defaultInstance = new GetResourceMessage(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.GetResourceMessage)
  }
  
  public interface LooseCastleMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 castleId = 1;
    boolean hasCastleId();
    int getCastleId();
  }
  public static final class LooseCastleMessage extends
      com.google.protobuf.GeneratedMessage
      implements LooseCastleMessageOrBuilder {
    // Use LooseCastleMessage.newBuilder() to construct.
    private LooseCastleMessage(Builder builder) {
      super(builder);
    }
    private LooseCastleMessage(boolean noInit) {}
    
    private static final LooseCastleMessage defaultInstance;
    public static LooseCastleMessage getDefaultInstance() {
      return defaultInstance;
    }
    
    public LooseCastleMessage getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseCastleMessage_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseCastleMessage_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 castleId = 1;
    public static final int CASTLEID_FIELD_NUMBER = 1;
    private int castleId_;
    public boolean hasCastleId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getCastleId() {
      return castleId_;
    }
    
    private void initFields() {
      castleId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasCastleId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, castleId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, castleId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseCastleMessage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseCastleMessage_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        castleId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage build() {
        vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage result = new vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.castleId_ = castleId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage.getDefaultInstance()) return this;
        if (other.hasCastleId()) {
          setCastleId(other.getCastleId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasCastleId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              castleId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 castleId = 1;
      private int castleId_ ;
      public boolean hasCastleId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getCastleId() {
        return castleId_;
      }
      public Builder setCastleId(int value) {
        bitField0_ |= 0x00000001;
        castleId_ = value;
        onChanged();
        return this;
      }
      public Builder clearCastleId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        castleId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.LooseCastleMessage)
    }
    
    static {
      defaultInstance = new LooseCastleMessage(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.LooseCastleMessage)
  }
  
  public interface LooseMineMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 mineId = 1;
    boolean hasMineId();
    int getMineId();
  }
  public static final class LooseMineMessage extends
      com.google.protobuf.GeneratedMessage
      implements LooseMineMessageOrBuilder {
    // Use LooseMineMessage.newBuilder() to construct.
    private LooseMineMessage(Builder builder) {
      super(builder);
    }
    private LooseMineMessage(boolean noInit) {}
    
    private static final LooseMineMessage defaultInstance;
    public static LooseMineMessage getDefaultInstance() {
      return defaultInstance;
    }
    
    public LooseMineMessage getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseMineMessage_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseMineMessage_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 mineId = 1;
    public static final int MINEID_FIELD_NUMBER = 1;
    private int mineId_;
    public boolean hasMineId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getMineId() {
      return mineId_;
    }
    
    private void initFields() {
      mineId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMineId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mineId_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mineId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseMineMessage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LooseMineMessage_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        mineId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage build() {
        vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage result = new vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mineId_ = mineId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage.getDefaultInstance()) return this;
        if (other.hasMineId()) {
          setMineId(other.getMineId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMineId()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mineId_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 mineId = 1;
      private int mineId_ ;
      public boolean hasMineId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getMineId() {
        return mineId_;
      }
      public Builder setMineId(int value) {
        bitField0_ |= 0x00000001;
        mineId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMineId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mineId_ = 0;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.LooseMineMessage)
    }
    
    static {
      defaultInstance = new LooseMineMessage(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.LooseMineMessage)
  }
  
  public interface TakeResourceMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .tutorial.Resource resource = 1;
    boolean hasResource();
    vsu.alivechess.net.commands.AliveChessProtos.Resource getResource();
    vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourceOrBuilder();
  }
  public static final class TakeResourceMessage extends
      com.google.protobuf.GeneratedMessage
      implements TakeResourceMessageOrBuilder {
    // Use TakeResourceMessage.newBuilder() to construct.
    private TakeResourceMessage(Builder builder) {
      super(builder);
    }
    private TakeResourceMessage(boolean noInit) {}
    
    private static final TakeResourceMessage defaultInstance;
    public static TakeResourceMessage getDefaultInstance() {
      return defaultInstance;
    }
    
    public TakeResourceMessage getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_TakeResourceMessage_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_TakeResourceMessage_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required .tutorial.Resource resource = 1;
    public static final int RESOURCE_FIELD_NUMBER = 1;
    private vsu.alivechess.net.commands.AliveChessProtos.Resource resource_;
    public boolean hasResource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.Resource getResource() {
      return resource_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourceOrBuilder() {
      return resource_;
    }
    
    private void initFields() {
      resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasResource()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, resource_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, resource_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_TakeResourceMessage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_TakeResourceMessage_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResourceFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (resourceBuilder_ == null) {
          resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
        } else {
          resourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage build() {
        vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage result = new vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (resourceBuilder_ == null) {
          result.resource_ = resource_;
        } else {
          result.resource_ = resourceBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage.getDefaultInstance()) return this;
        if (other.hasResource()) {
          mergeResource(other.getResource());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasResource()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder();
              if (hasResource()) {
                subBuilder.mergeFrom(getResource());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setResource(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .tutorial.Resource resource = 1;
      private vsu.alivechess.net.commands.AliveChessProtos.Resource resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> resourceBuilder_;
      public boolean hasResource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource getResource() {
        if (resourceBuilder_ == null) {
          return resource_;
        } else {
          return resourceBuilder_.getMessage();
        }
      }
      public Builder setResource(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resource_ = value;
          onChanged();
        } else {
          resourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setResource(
          vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder builderForValue) {
        if (resourceBuilder_ == null) {
          resource_ = builderForValue.build();
          onChanged();
        } else {
          resourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeResource(vsu.alivechess.net.commands.AliveChessProtos.Resource value) {
        if (resourceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              resource_ != vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance()) {
            resource_ =
              vsu.alivechess.net.commands.AliveChessProtos.Resource.newBuilder(resource_).mergeFrom(value).buildPartial();
          } else {
            resource_ = value;
          }
          onChanged();
        } else {
          resourceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearResource() {
        if (resourceBuilder_ == null) {
          resource_ = vsu.alivechess.net.commands.AliveChessProtos.Resource.getDefaultInstance();
          onChanged();
        } else {
          resourceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder getResourceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getResourceFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder getResourceOrBuilder() {
        if (resourceBuilder_ != null) {
          return resourceBuilder_.getMessageOrBuilder();
        } else {
          return resource_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder> 
          getResourceFieldBuilder() {
        if (resourceBuilder_ == null) {
          resourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.Resource, vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder, vsu.alivechess.net.commands.AliveChessProtos.ResourceOrBuilder>(
                  resource_,
                  getParentForChildren(),
                  isClean());
          resource_ = null;
        }
        return resourceBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.TakeResourceMessage)
    }
    
    static {
      defaultInstance = new TakeResourceMessage(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.TakeResourceMessage)
  }
  
  public interface UpdateWorldMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int32 objectId = 1;
    boolean hasObjectId();
    int getObjectId();
    
    // optional .tutorial.FPosition location = 2;
    boolean hasLocation();
    vsu.alivechess.net.commands.AliveChessProtos.FPosition getLocation();
    vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder getLocationOrBuilder();
    
    // optional .tutorial.UpdateType updateType = 3;
    boolean hasUpdateType();
    vsu.alivechess.net.commands.AliveChessProtos.UpdateType getUpdateType();
  }
  public static final class UpdateWorldMessage extends
      com.google.protobuf.GeneratedMessage
      implements UpdateWorldMessageOrBuilder {
    // Use UpdateWorldMessage.newBuilder() to construct.
    private UpdateWorldMessage(Builder builder) {
      super(builder);
    }
    private UpdateWorldMessage(boolean noInit) {}
    
    private static final UpdateWorldMessage defaultInstance;
    public static UpdateWorldMessage getDefaultInstance() {
      return defaultInstance;
    }
    
    public UpdateWorldMessage getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_UpdateWorldMessage_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_UpdateWorldMessage_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required int32 objectId = 1;
    public static final int OBJECTID_FIELD_NUMBER = 1;
    private int objectId_;
    public boolean hasObjectId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getObjectId() {
      return objectId_;
    }
    
    // optional .tutorial.FPosition location = 2;
    public static final int LOCATION_FIELD_NUMBER = 2;
    private vsu.alivechess.net.commands.AliveChessProtos.FPosition location_;
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.FPosition getLocation() {
      return location_;
    }
    public vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder getLocationOrBuilder() {
      return location_;
    }
    
    // optional .tutorial.UpdateType updateType = 3;
    public static final int UPDATETYPE_FIELD_NUMBER = 3;
    private vsu.alivechess.net.commands.AliveChessProtos.UpdateType updateType_;
    public boolean hasUpdateType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public vsu.alivechess.net.commands.AliveChessProtos.UpdateType getUpdateType() {
      return updateType_;
    }
    
    private void initFields() {
      objectId_ = 0;
      location_ = vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance();
      updateType_ = vsu.alivechess.net.commands.AliveChessProtos.UpdateType.KingMove;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasObjectId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasLocation()) {
        if (!getLocation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, objectId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, location_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, updateType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, objectId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, location_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, updateType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_UpdateWorldMessage_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_UpdateWorldMessage_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        objectId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (locationBuilder_ == null) {
          location_ = vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        updateType_ = vsu.alivechess.net.commands.AliveChessProtos.UpdateType.KingMove;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage build() {
        vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage result = new vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.objectId_ = objectId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.updateType_ = updateType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage.getDefaultInstance()) return this;
        if (other.hasObjectId()) {
          setObjectId(other.getObjectId());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasUpdateType()) {
          setUpdateType(other.getUpdateType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasObjectId()) {
          
          return false;
        }
        if (hasLocation()) {
          if (!getLocation().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              objectId_ = input.readInt32();
              break;
            }
            case 18: {
              vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder subBuilder = vsu.alivechess.net.commands.AliveChessProtos.FPosition.newBuilder();
              if (hasLocation()) {
                subBuilder.mergeFrom(getLocation());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLocation(subBuilder.buildPartial());
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              vsu.alivechess.net.commands.AliveChessProtos.UpdateType value = vsu.alivechess.net.commands.AliveChessProtos.UpdateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                updateType_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 objectId = 1;
      private int objectId_ ;
      public boolean hasObjectId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getObjectId() {
        return objectId_;
      }
      public Builder setObjectId(int value) {
        bitField0_ |= 0x00000001;
        objectId_ = value;
        onChanged();
        return this;
      }
      public Builder clearObjectId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        objectId_ = 0;
        onChanged();
        return this;
      }
      
      // optional .tutorial.FPosition location = 2;
      private vsu.alivechess.net.commands.AliveChessProtos.FPosition location_ = vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.FPosition, vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder, vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder> locationBuilder_;
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.FPosition getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      public Builder setLocation(vsu.alivechess.net.commands.AliveChessProtos.FPosition value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setLocation(
          vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeLocation(vsu.alivechess.net.commands.AliveChessProtos.FPosition value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              location_ != vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance()) {
            location_ =
              vsu.alivechess.net.commands.AliveChessProtos.FPosition.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder getLocationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      public vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          vsu.alivechess.net.commands.AliveChessProtos.FPosition, vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder, vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              vsu.alivechess.net.commands.AliveChessProtos.FPosition, vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder, vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder>(
                  location_,
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }
      
      // optional .tutorial.UpdateType updateType = 3;
      private vsu.alivechess.net.commands.AliveChessProtos.UpdateType updateType_ = vsu.alivechess.net.commands.AliveChessProtos.UpdateType.KingMove;
      public boolean hasUpdateType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public vsu.alivechess.net.commands.AliveChessProtos.UpdateType getUpdateType() {
        return updateType_;
      }
      public Builder setUpdateType(vsu.alivechess.net.commands.AliveChessProtos.UpdateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        updateType_ = value;
        onChanged();
        return this;
      }
      public Builder clearUpdateType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        updateType_ = vsu.alivechess.net.commands.AliveChessProtos.UpdateType.KingMove;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.UpdateWorldMessage)
    }
    
    static {
      defaultInstance = new UpdateWorldMessage(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.UpdateWorldMessage)
  }
  
  public interface FPositionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required float x = 1;
    boolean hasX();
    float getX();
    
    // required float y = 2;
    boolean hasY();
    float getY();
  }
  public static final class FPosition extends
      com.google.protobuf.GeneratedMessage
      implements FPositionOrBuilder {
    // Use FPosition.newBuilder() to construct.
    private FPosition(Builder builder) {
      super(builder);
    }
    private FPosition(boolean noInit) {}
    
    private static final FPosition defaultInstance;
    public static FPosition getDefaultInstance() {
      return defaultInstance;
    }
    
    public FPosition getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_FPosition_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_FPosition_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required float x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getX() {
      return x_;
    }
    
    // required float y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getY() {
      return y_;
    }
    
    private void initFields() {
      x_ = 0F;
      y_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.FPosition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.FPosition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.FPositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_FPosition_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_FPosition_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.FPosition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.FPosition getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.FPosition build() {
        vsu.alivechess.net.commands.AliveChessProtos.FPosition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.FPosition buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.FPosition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.FPosition buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.FPosition result = new vsu.alivechess.net.commands.AliveChessProtos.FPosition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.FPosition) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.FPosition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.FPosition other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.FPosition.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required float x = 1;
      private float x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public float getX() {
        return x_;
      }
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }
      
      // required float y = 2;
      private float y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getY() {
        return y_;
      }
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.FPosition)
    }
    
    static {
      defaultInstance = new FPosition(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.FPosition)
  }
  
  public interface LeaveCastleRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class LeaveCastleRequest extends
      com.google.protobuf.GeneratedMessage
      implements LeaveCastleRequestOrBuilder {
    // Use LeaveCastleRequest.newBuilder() to construct.
    private LeaveCastleRequest(Builder builder) {
      super(builder);
    }
    private LeaveCastleRequest(boolean noInit) {}
    
    private static final LeaveCastleRequest defaultInstance;
    public static LeaveCastleRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public LeaveCastleRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest result = new vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.LeaveCastleRequest)
    }
    
    static {
      defaultInstance = new LeaveCastleRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.LeaveCastleRequest)
  }
  
  public interface LeaveCastleResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class LeaveCastleResponse extends
      com.google.protobuf.GeneratedMessage
      implements LeaveCastleResponseOrBuilder {
    // Use LeaveCastleResponse.newBuilder() to construct.
    private LeaveCastleResponse(Builder builder) {
      super(builder);
    }
    private LeaveCastleResponse(boolean noInit) {}
    
    private static final LeaveCastleResponse defaultInstance;
    public static LeaveCastleResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public LeaveCastleResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleResponse_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_LeaveCastleResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse result = new vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.LeaveCastleResponse)
    }
    
    static {
      defaultInstance = new LeaveCastleResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.LeaveCastleResponse)
  }
  
  public interface BigMapRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class BigMapRequest extends
      com.google.protobuf.GeneratedMessage
      implements BigMapRequestOrBuilder {
    // Use BigMapRequest.newBuilder() to construct.
    private BigMapRequest(Builder builder) {
      super(builder);
    }
    private BigMapRequest(boolean noInit) {}
    
    private static final BigMapRequest defaultInstance;
    public static BigMapRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public BigMapRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.BigMapRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest result = new vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.BigMapRequest)
    }
    
    static {
      defaultInstance = new BigMapRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.BigMapRequest)
  }
  
  public interface BigMapResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional bool isAllowed = 1;
    boolean hasIsAllowed();
    boolean getIsAllowed();
  }
  public static final class BigMapResponse extends
      com.google.protobuf.GeneratedMessage
      implements BigMapResponseOrBuilder {
    // Use BigMapResponse.newBuilder() to construct.
    private BigMapResponse(Builder builder) {
      super(builder);
    }
    private BigMapResponse(boolean noInit) {}
    
    private static final BigMapResponse defaultInstance;
    public static BigMapResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public BigMapResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapResponse_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional bool isAllowed = 1;
    public static final int ISALLOWED_FIELD_NUMBER = 1;
    private boolean isAllowed_;
    public boolean hasIsAllowed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public boolean getIsAllowed() {
      return isAllowed_;
    }
    
    private void initFields() {
      isAllowed_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, isAllowed_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isAllowed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.BigMapResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_BigMapResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        isAllowed_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse result = new vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.isAllowed_ = isAllowed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse.getDefaultInstance()) return this;
        if (other.hasIsAllowed()) {
          setIsAllowed(other.getIsAllowed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              isAllowed_ = input.readBool();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional bool isAllowed = 1;
      private boolean isAllowed_ ;
      public boolean hasIsAllowed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public boolean getIsAllowed() {
        return isAllowed_;
      }
      public Builder setIsAllowed(boolean value) {
        bitField0_ |= 0x00000001;
        isAllowed_ = value;
        onChanged();
        return this;
      }
      public Builder clearIsAllowed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isAllowed_ = false;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:tutorial.BigMapResponse)
    }
    
    static {
      defaultInstance = new BigMapResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.BigMapResponse)
  }
  
  public interface ExitFromGameRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class ExitFromGameRequest extends
      com.google.protobuf.GeneratedMessage
      implements ExitFromGameRequestOrBuilder {
    // Use ExitFromGameRequest.newBuilder() to construct.
    private ExitFromGameRequest(Builder builder) {
      super(builder);
    }
    private ExitFromGameRequest(boolean noInit) {}
    
    private static final ExitFromGameRequest defaultInstance;
    public static ExitFromGameRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public ExitFromGameRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameRequest_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameRequest_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest build() {
        vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest result = new vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.ExitFromGameRequest)
    }
    
    static {
      defaultInstance = new ExitFromGameRequest(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ExitFromGameRequest)
  }
  
  public interface ExitFromGameResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  public static final class ExitFromGameResponse extends
      com.google.protobuf.GeneratedMessage
      implements ExitFromGameResponseOrBuilder {
    // Use ExitFromGameResponse.newBuilder() to construct.
    private ExitFromGameResponse(Builder builder) {
      super(builder);
    }
    private ExitFromGameResponse(boolean noInit) {}
    
    private static final ExitFromGameResponse defaultInstance;
    public static ExitFromGameResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public ExitFromGameResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameResponse_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameResponse_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return vsu.alivechess.net.commands.AliveChessProtos.internal_static_tutorial_ExitFromGameResponse_fieldAccessorTable;
      }
      
      // Construct using vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse.getDescriptor();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse getDefaultInstanceForType() {
        return vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse.getDefaultInstance();
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse build() {
        vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse buildPartial() {
        vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse result = new vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse(this);
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse) {
          return mergeFrom((vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse other) {
        if (other == vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:tutorial.ExitFromGameResponse)
    }
    
    static {
      defaultInstance = new ExitFromGameResponse(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:tutorial.ExitFromGameResponse)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ErrorMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ErrorMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_RegisterRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_RegisterRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_RegisterResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_RegisterResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_AuthorizeRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_AuthorizeRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_AuthorizeResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_AuthorizeResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetMapRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetMapRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetMapResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetMapResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_Castle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_Castle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_Mine_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_Mine_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_Resource_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_Resource_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_BasePoint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_BasePoint_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetGameStateRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetGameStateRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetGameStateResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetGameStateResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_King_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_King_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetObjectsRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetObjectsRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetObjectsResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetObjectsResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_SingleObject_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_SingleObject_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MultyObject_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_MultyObject_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_Border_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_Border_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MoveKingRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_MoveKingRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_MoveKingResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_MoveKingResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_Position_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_Position_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_CaptureCastleRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_CaptureCastleRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_CaptureCastleResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_CaptureCastleResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_CaptureMineRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_CaptureMineRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_CaptureMineResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_CaptureMineResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ComeInCastleRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ComeInCastleRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ComeInCastleResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ComeInCastleResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ContactCastleRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ContactCastleRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ContactCastleResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ContactCastleResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_Dialog_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_Dialog_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_GetResourceMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_GetResourceMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_LooseCastleMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_LooseCastleMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_LooseMineMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_LooseMineMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_TakeResourceMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_TakeResourceMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_UpdateWorldMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_UpdateWorldMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_FPosition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_FPosition_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_LeaveCastleRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_LeaveCastleRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_LeaveCastleResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_LeaveCastleResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_BigMapRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_BigMapRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_BigMapResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_BigMapResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ExitFromGameRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ExitFromGameRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_tutorial_ExitFromGameResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_tutorial_ExitFromGameResponse_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021alivechess2.proto\022\010tutorial\"\037\n\014ErrorMe" +
      "ssage\022\017\n\007message\030\001 \002(\t\"2\n\017RegisterReques" +
      "t\022\r\n\005login\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"\'\n\020Re" +
      "gisterResponse\022\023\n\013isSuccessed\030\001 \002(\010\"3\n\020A" +
      "uthorizeRequest\022\r\n\005login\030\001 \002(\t\022\020\n\010passwo" +
      "rd\030\002 \002(\t\"T\n\021AuthorizeResponse\022\023\n\013isNewPl" +
      "ayer\030\001 \002(\010\022\024\n\014isAuthorized\030\002 \002(\010\022\024\n\014erro" +
      "rMessage\030\003 \001(\t\"\017\n\rGetMapRequest\"\255\002\n\016GetM" +
      "apResponse\022\r\n\005mapId\030\001 \002(\005\022\020\n\010sizeMapX\030\002 " +
      "\002(\005\022\020\n\010sizeMapY\030\003 \002(\005\022!\n\007castles\030\004 \003(\0132\020",
      ".tutorial.Castle\022\035\n\005mines\030\005 \003(\0132\016.tutori" +
      "al.Mine\022\'\n\nbasePoints\030\006 \003(\0132\023.tutorial.B" +
      "asePoint\022-\n\rsingleObjects\030\007 \003(\0132\026.tutori" +
      "al.SingleObject\022+\n\014multyObjects\030\010 \003(\0132\025." +
      "tutorial.MultyObject\022!\n\007borders\030\t \003(\0132\020." +
      "tutorial.Border\"g\n\006Castle\022\020\n\010castleId\030\001 " +
      "\002(\005\022\r\n\005leftX\030\002 \001(\005\022\014\n\004topY\030\003 \001(\005\022\r\n\005widt" +
      "h\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022\017\n\007wayCost\030\006 \001(\002" +
      "\"\242\001\n\004Mine\022\016\n\006mineId\030\001 \002(\005\022\r\n\005leftX\030\002 \001(\005" +
      "\022\014\n\004topY\030\003 \001(\005\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030",
      "\005 \001(\005\022\017\n\007wayCost\030\006 \001(\002\022+\n\017gainingResourc" +
      "e\030\007 \001(\0132\022.tutorial.Resource\022\020\n\010sizeMine\030" +
      "\010 \001(\005\"\213\001\n\010Resource\022\022\n\nresourceId\030\001 \001(\005\022\t" +
      "\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022-\n\014resourceType\030\004 \001" +
      "(\0162\027.tutorial.ResourceTypes\022\025\n\rresourceC" +
      "ount\030\005 \001(\005\022\017\n\007wayCost\030\006 \001(\002\"}\n\tBasePoint" +
      "\022\023\n\013basePointId\030\001 \002(\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 " +
      "\002(\005\0224\n\022landscapePointType\030\004 \002(\0162\030.tutori" +
      "al.LandscapeTypes\022\017\n\007wayCost\030\005 \001(\002\"\025\n\023Ge" +
      "tGameStateRequest\"\202\001\n\024GetGameStateRespon",
      "se\022\034\n\004king\030\001 \002(\0132\016.tutorial.King\022 \n\006cast" +
      "le\030\002 \002(\0132\020.tutorial.Castle\022*\n\016startResou" +
      "rces\030\003 \003(\0132\022.tutorial.Resource\"p\n\004King\022\016" +
      "\n\006kingId\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\020\n\010" +
      "kingName\030\004 \001(\t\022\026\n\016kingExperience\030\005 \001(\005\022\030" +
      "\n\020kingMilitaryRank\030\006 \001(\005\"p\n\021GetObjectsRe" +
      "quest\022\022\n\nobserverId\030\001 \001(\005\022\033\n\023forConcrete" +
      "Observer\030\002 \001(\010\022*\n\014observerType\030\003 \001(\0162\024.t" +
      "utorial.PointTypes\"Z\n\022GetObjectsResponse" +
      "\022%\n\tresources\030\001 \003(\0132\022.tutorial.Resource\022",
      "\035\n\005kings\030\002 \003(\0132\016.tutorial.King\"\203\001\n\014Singl" +
      "eObject\022\026\n\016singleObjectId\030\001 \002(\005\022\t\n\001x\030\002 \002" +
      "(\005\022\t\n\001y\030\003 \002(\005\0224\n\020singleObjectType\030\004 \001(\0162" +
      "\032.tutorial.SingleObjectType\022\017\n\007wayCost\030\005" +
      " \001(\002\"\246\001\n\013MultyObject\022\025\n\rmultyObjectId\030\001 " +
      "\002(\005\022\r\n\005leftX\030\002 \002(\005\022\014\n\004topY\030\003 \002(\005\022\r\n\005widt" +
      "h\030\004 \002(\005\022\016\n\006height\030\005 \002(\005\022\017\n\007wayCost\030\006 \001(\002" +
      "\0223\n\017multyObjectType\030\007 \001(\0162\032.tutorial.Mul" +
      "tyObjectTypes\"A\n\006Border\022\020\n\010borderId\030\001 \002(" +
      "\005\022\t\n\001x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\017\n\007wayCost\030\004 \001(\002",
      "\"\'\n\017MoveKingRequest\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(" +
      "\005\"5\n\020MoveKingResponse\022!\n\005steps\030\001 \003(\0132\022.t" +
      "utorial.Position\" \n\010Position\022\t\n\001x\030\001 \001(\005\022" +
      "\t\n\001y\030\002 \001(\005\"(\n\024CaptureCastleRequest\022\020\n\010ca" +
      "stleId\030\001 \002(\005\"9\n\025CaptureCastleResponse\022 \n" +
      "\006castle\030\001 \001(\0132\020.tutorial.Castle\"$\n\022Captu" +
      "reMineRequest\022\016\n\006mineId\030\001 \002(\005\"3\n\023Capture" +
      "MineResponse\022\034\n\004mine\030\001 \001(\0132\016.tutorial.Mi" +
      "ne\"\'\n\023ComeInCastleRequest\022\020\n\010castleId\030\001 " +
      "\002(\005\"(\n\024ComeInCastleResponse\022\020\n\010castleId\030",
      "\001 \001(\005\"(\n\024ContactCastleRequest\022\020\n\010castleI" +
      "d\030\001 \002(\005\"\\\n\025ContactCastleResponse\022!\n\007disp" +
      "ute\030\001 \002(\0132\020.tutorial.Dialog\022 \n\006castle\030\002 " +
      "\002(\0132\020.tutorial.Castle\"J\n\006Dialog\022\n\n\002id\030\001 " +
      "\001(\005\022\"\n\nrespondent\030\002 \001(\0132\016.tutorial.King\022" +
      "\020\n\010yourStep\030\003 \001(\010\"L\n\022GetResourceMessage\022" +
      "$\n\010resource\030\001 \002(\0132\022.tutorial.Resource\022\020\n" +
      "\010fromMine\030\002 \001(\010\"&\n\022LooseCastleMessage\022\020\n" +
      "\010castleId\030\001 \002(\005\"\"\n\020LooseMineMessage\022\016\n\006m" +
      "ineId\030\001 \002(\005\";\n\023TakeResourceMessage\022$\n\010re",
      "source\030\001 \002(\0132\022.tutorial.Resource\"w\n\022Upda" +
      "teWorldMessage\022\020\n\010objectId\030\001 \002(\005\022%\n\010loca" +
      "tion\030\002 \001(\0132\023.tutorial.FPosition\022(\n\nupdat" +
      "eType\030\003 \001(\0162\024.tutorial.UpdateType\"!\n\tFPo" +
      "sition\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\024\n\022LeaveCas" +
      "tleRequest\"\025\n\023LeaveCastleResponse\"\017\n\rBig" +
      "MapRequest\"#\n\016BigMapResponse\022\021\n\tisAllowe" +
      "d\030\001 \001(\010\"\025\n\023ExitFromGameRequest\"\026\n\024ExitFr" +
      "omGameResponse*G\n\rResourceTypes\022\t\n\005rCoal" +
      "\020\000\022\t\n\005rGold\020\001\022\t\n\005rIron\020\002\022\n\n\006rStone\020\003\022\t\n\005",
      "rWood\020\004*;\n\016LandscapeTypes\022\010\n\004None\020\000\022\t\n\005G" +
      "rass\020\001\022\n\n\006Ground\020\002\022\010\n\004Snow\020\003*~\n\nPointTyp" +
      "es\022\t\n\005pNone\020\000\022\t\n\005pKing\020\001\022\013\n\007pCastle\020\002\022\t\n" +
      "\005pMine\020\003\022\r\n\tpResource\020\004\022\021\n\rpSingleObject" +
      "\020\005\022\020\n\014pMultyObject\020\006\022\016\n\npLandscape\020\007**\n\020" +
      "SingleObjectType\022\010\n\004Tree\020\000\022\014\n\010Obstacle\020\001" +
      "*\034\n\020MultyObjectTypes\022\010\n\004Rock\020\000*T\n\nUpdate" +
      "Type\022\014\n\010KingMove\020\000\022\016\n\nKingAppear\020\001\022\021\n\rKi" +
      "ngDisappear\020\002\022\025\n\021ResourceDisappear\020\003B/\n\033" +
      "vsu.alivechess.net.commandsB\020AliveChessP",
      "rotos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_tutorial_ErrorMessage_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_tutorial_ErrorMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ErrorMessage_descriptor,
              new java.lang.String[] { "Message", },
              vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage.class,
              vsu.alivechess.net.commands.AliveChessProtos.ErrorMessage.Builder.class);
          internal_static_tutorial_RegisterRequest_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_tutorial_RegisterRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_RegisterRequest_descriptor,
              new java.lang.String[] { "Login", "Password", },
              vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.RegisterRequest.Builder.class);
          internal_static_tutorial_RegisterResponse_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_tutorial_RegisterResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_RegisterResponse_descriptor,
              new java.lang.String[] { "IsSuccessed", },
              vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.RegisterResponse.Builder.class);
          internal_static_tutorial_AuthorizeRequest_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_tutorial_AuthorizeRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_AuthorizeRequest_descriptor,
              new java.lang.String[] { "Login", "Password", },
              vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.AuthorizeRequest.Builder.class);
          internal_static_tutorial_AuthorizeResponse_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_tutorial_AuthorizeResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_AuthorizeResponse_descriptor,
              new java.lang.String[] { "IsNewPlayer", "IsAuthorized", "ErrorMessage", },
              vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.AuthorizeResponse.Builder.class);
          internal_static_tutorial_GetMapRequest_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_tutorial_GetMapRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetMapRequest_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetMapRequest.Builder.class);
          internal_static_tutorial_GetMapResponse_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_tutorial_GetMapResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetMapResponse_descriptor,
              new java.lang.String[] { "MapId", "SizeMapX", "SizeMapY", "Castles", "Mines", "BasePoints", "SingleObjects", "MultyObjects", "Borders", },
              vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetMapResponse.Builder.class);
          internal_static_tutorial_Castle_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_tutorial_Castle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_Castle_descriptor,
              new java.lang.String[] { "CastleId", "LeftX", "TopY", "Width", "Height", "WayCost", },
              vsu.alivechess.net.commands.AliveChessProtos.Castle.class,
              vsu.alivechess.net.commands.AliveChessProtos.Castle.Builder.class);
          internal_static_tutorial_Mine_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_tutorial_Mine_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_Mine_descriptor,
              new java.lang.String[] { "MineId", "LeftX", "TopY", "Width", "Height", "WayCost", "GainingResource", "SizeMine", },
              vsu.alivechess.net.commands.AliveChessProtos.Mine.class,
              vsu.alivechess.net.commands.AliveChessProtos.Mine.Builder.class);
          internal_static_tutorial_Resource_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_tutorial_Resource_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_Resource_descriptor,
              new java.lang.String[] { "ResourceId", "X", "Y", "ResourceType", "ResourceCount", "WayCost", },
              vsu.alivechess.net.commands.AliveChessProtos.Resource.class,
              vsu.alivechess.net.commands.AliveChessProtos.Resource.Builder.class);
          internal_static_tutorial_BasePoint_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_tutorial_BasePoint_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_BasePoint_descriptor,
              new java.lang.String[] { "BasePointId", "X", "Y", "LandscapePointType", "WayCost", },
              vsu.alivechess.net.commands.AliveChessProtos.BasePoint.class,
              vsu.alivechess.net.commands.AliveChessProtos.BasePoint.Builder.class);
          internal_static_tutorial_GetGameStateRequest_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_tutorial_GetGameStateRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetGameStateRequest_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetGameStateRequest.Builder.class);
          internal_static_tutorial_GetGameStateResponse_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_tutorial_GetGameStateResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetGameStateResponse_descriptor,
              new java.lang.String[] { "King", "Castle", "StartResources", },
              vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetGameStateResponse.Builder.class);
          internal_static_tutorial_King_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_tutorial_King_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_King_descriptor,
              new java.lang.String[] { "KingId", "X", "Y", "KingName", "KingExperience", "KingMilitaryRank", },
              vsu.alivechess.net.commands.AliveChessProtos.King.class,
              vsu.alivechess.net.commands.AliveChessProtos.King.Builder.class);
          internal_static_tutorial_GetObjectsRequest_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_tutorial_GetObjectsRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetObjectsRequest_descriptor,
              new java.lang.String[] { "ObserverId", "ForConcreteObserver", "ObserverType", },
              vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetObjectsRequest.Builder.class);
          internal_static_tutorial_GetObjectsResponse_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_tutorial_GetObjectsResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetObjectsResponse_descriptor,
              new java.lang.String[] { "Resources", "Kings", },
              vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetObjectsResponse.Builder.class);
          internal_static_tutorial_SingleObject_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_tutorial_SingleObject_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_SingleObject_descriptor,
              new java.lang.String[] { "SingleObjectId", "X", "Y", "SingleObjectType", "WayCost", },
              vsu.alivechess.net.commands.AliveChessProtos.SingleObject.class,
              vsu.alivechess.net.commands.AliveChessProtos.SingleObject.Builder.class);
          internal_static_tutorial_MultyObject_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_tutorial_MultyObject_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_MultyObject_descriptor,
              new java.lang.String[] { "MultyObjectId", "LeftX", "TopY", "Width", "Height", "WayCost", "MultyObjectType", },
              vsu.alivechess.net.commands.AliveChessProtos.MultyObject.class,
              vsu.alivechess.net.commands.AliveChessProtos.MultyObject.Builder.class);
          internal_static_tutorial_Border_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_tutorial_Border_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_Border_descriptor,
              new java.lang.String[] { "BorderId", "X", "Y", "WayCost", },
              vsu.alivechess.net.commands.AliveChessProtos.Border.class,
              vsu.alivechess.net.commands.AliveChessProtos.Border.Builder.class);
          internal_static_tutorial_MoveKingRequest_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_tutorial_MoveKingRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_MoveKingRequest_descriptor,
              new java.lang.String[] { "X", "Y", },
              vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.MoveKingRequest.Builder.class);
          internal_static_tutorial_MoveKingResponse_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_tutorial_MoveKingResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_MoveKingResponse_descriptor,
              new java.lang.String[] { "Steps", },
              vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.MoveKingResponse.Builder.class);
          internal_static_tutorial_Position_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_tutorial_Position_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_Position_descriptor,
              new java.lang.String[] { "X", "Y", },
              vsu.alivechess.net.commands.AliveChessProtos.Position.class,
              vsu.alivechess.net.commands.AliveChessProtos.Position.Builder.class);
          internal_static_tutorial_CaptureCastleRequest_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_tutorial_CaptureCastleRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_CaptureCastleRequest_descriptor,
              new java.lang.String[] { "CastleId", },
              vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleRequest.Builder.class);
          internal_static_tutorial_CaptureCastleResponse_descriptor =
            getDescriptor().getMessageTypes().get(23);
          internal_static_tutorial_CaptureCastleResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_CaptureCastleResponse_descriptor,
              new java.lang.String[] { "Castle", },
              vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.CaptureCastleResponse.Builder.class);
          internal_static_tutorial_CaptureMineRequest_descriptor =
            getDescriptor().getMessageTypes().get(24);
          internal_static_tutorial_CaptureMineRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_CaptureMineRequest_descriptor,
              new java.lang.String[] { "MineId", },
              vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.CaptureMineRequest.Builder.class);
          internal_static_tutorial_CaptureMineResponse_descriptor =
            getDescriptor().getMessageTypes().get(25);
          internal_static_tutorial_CaptureMineResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_CaptureMineResponse_descriptor,
              new java.lang.String[] { "Mine", },
              vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.CaptureMineResponse.Builder.class);
          internal_static_tutorial_ComeInCastleRequest_descriptor =
            getDescriptor().getMessageTypes().get(26);
          internal_static_tutorial_ComeInCastleRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ComeInCastleRequest_descriptor,
              new java.lang.String[] { "CastleId", },
              vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleRequest.Builder.class);
          internal_static_tutorial_ComeInCastleResponse_descriptor =
            getDescriptor().getMessageTypes().get(27);
          internal_static_tutorial_ComeInCastleResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ComeInCastleResponse_descriptor,
              new java.lang.String[] { "CastleId", },
              vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.ComeInCastleResponse.Builder.class);
          internal_static_tutorial_ContactCastleRequest_descriptor =
            getDescriptor().getMessageTypes().get(28);
          internal_static_tutorial_ContactCastleRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ContactCastleRequest_descriptor,
              new java.lang.String[] { "CastleId", },
              vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.ContactCastleRequest.Builder.class);
          internal_static_tutorial_ContactCastleResponse_descriptor =
            getDescriptor().getMessageTypes().get(29);
          internal_static_tutorial_ContactCastleResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ContactCastleResponse_descriptor,
              new java.lang.String[] { "Dispute", "Castle", },
              vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.ContactCastleResponse.Builder.class);
          internal_static_tutorial_Dialog_descriptor =
            getDescriptor().getMessageTypes().get(30);
          internal_static_tutorial_Dialog_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_Dialog_descriptor,
              new java.lang.String[] { "Id", "Respondent", "YourStep", },
              vsu.alivechess.net.commands.AliveChessProtos.Dialog.class,
              vsu.alivechess.net.commands.AliveChessProtos.Dialog.Builder.class);
          internal_static_tutorial_GetResourceMessage_descriptor =
            getDescriptor().getMessageTypes().get(31);
          internal_static_tutorial_GetResourceMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_GetResourceMessage_descriptor,
              new java.lang.String[] { "Resource", "FromMine", },
              vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage.class,
              vsu.alivechess.net.commands.AliveChessProtos.GetResourceMessage.Builder.class);
          internal_static_tutorial_LooseCastleMessage_descriptor =
            getDescriptor().getMessageTypes().get(32);
          internal_static_tutorial_LooseCastleMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_LooseCastleMessage_descriptor,
              new java.lang.String[] { "CastleId", },
              vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage.class,
              vsu.alivechess.net.commands.AliveChessProtos.LooseCastleMessage.Builder.class);
          internal_static_tutorial_LooseMineMessage_descriptor =
            getDescriptor().getMessageTypes().get(33);
          internal_static_tutorial_LooseMineMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_LooseMineMessage_descriptor,
              new java.lang.String[] { "MineId", },
              vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage.class,
              vsu.alivechess.net.commands.AliveChessProtos.LooseMineMessage.Builder.class);
          internal_static_tutorial_TakeResourceMessage_descriptor =
            getDescriptor().getMessageTypes().get(34);
          internal_static_tutorial_TakeResourceMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_TakeResourceMessage_descriptor,
              new java.lang.String[] { "Resource", },
              vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage.class,
              vsu.alivechess.net.commands.AliveChessProtos.TakeResourceMessage.Builder.class);
          internal_static_tutorial_UpdateWorldMessage_descriptor =
            getDescriptor().getMessageTypes().get(35);
          internal_static_tutorial_UpdateWorldMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_UpdateWorldMessage_descriptor,
              new java.lang.String[] { "ObjectId", "Location", "UpdateType", },
              vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage.class,
              vsu.alivechess.net.commands.AliveChessProtos.UpdateWorldMessage.Builder.class);
          internal_static_tutorial_FPosition_descriptor =
            getDescriptor().getMessageTypes().get(36);
          internal_static_tutorial_FPosition_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_FPosition_descriptor,
              new java.lang.String[] { "X", "Y", },
              vsu.alivechess.net.commands.AliveChessProtos.FPosition.class,
              vsu.alivechess.net.commands.AliveChessProtos.FPosition.Builder.class);
          internal_static_tutorial_LeaveCastleRequest_descriptor =
            getDescriptor().getMessageTypes().get(37);
          internal_static_tutorial_LeaveCastleRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_LeaveCastleRequest_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleRequest.Builder.class);
          internal_static_tutorial_LeaveCastleResponse_descriptor =
            getDescriptor().getMessageTypes().get(38);
          internal_static_tutorial_LeaveCastleResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_LeaveCastleResponse_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.LeaveCastleResponse.Builder.class);
          internal_static_tutorial_BigMapRequest_descriptor =
            getDescriptor().getMessageTypes().get(39);
          internal_static_tutorial_BigMapRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_BigMapRequest_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.BigMapRequest.Builder.class);
          internal_static_tutorial_BigMapResponse_descriptor =
            getDescriptor().getMessageTypes().get(40);
          internal_static_tutorial_BigMapResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_BigMapResponse_descriptor,
              new java.lang.String[] { "IsAllowed", },
              vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.BigMapResponse.Builder.class);
          internal_static_tutorial_ExitFromGameRequest_descriptor =
            getDescriptor().getMessageTypes().get(41);
          internal_static_tutorial_ExitFromGameRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ExitFromGameRequest_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest.class,
              vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameRequest.Builder.class);
          internal_static_tutorial_ExitFromGameResponse_descriptor =
            getDescriptor().getMessageTypes().get(42);
          internal_static_tutorial_ExitFromGameResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_tutorial_ExitFromGameResponse_descriptor,
              new java.lang.String[] { },
              vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse.class,
              vsu.alivechess.net.commands.AliveChessProtos.ExitFromGameResponse.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
