///////////////////////////////////////////////////////////
//  PriorityQueue.cs
//  Implementation of the Class PriorityQueue
//  Generated by Enterprise Architect
//  Created on:      16-фев-2009 0:07:57
///////////////////////////////////////////////////////////
using System.Collections.Generic;

namespace AliveChessServer.LogicLayer.AI.BehaviorLayer
{
    public class PriorityQueue
    {
        private SortedList<int, Goal> goals = new SortedList<int, Goal>();
        public PriorityQueue()
        {

        }

        /// 
        /// <param name="goal"></param>
        public void Enqueue(Goal goal)
        {
            goals.Add(goal.Priority, goal);
        }

        public bool IsEmpty()
        {
            return goals.Count == 0;
        }
        public int Count
        {
            get
            {
                return goals.Count;
            }
        }
        public Goal Dequeue()
        {
            Goal g = goals.Values.Count > 0 ? goals.Values[0] : null;
            if (g != null)
            {
                goals.Remove(g.Priority);
            }
            return g;
        }
        public Goal Peek()
        {
            return goals.Values.Count > 0 ? goals.Values[0] : null;
        }

        public bool Exists(int priority)
        {
            return goals.ContainsKey(priority);
        }

        public void RemoveGoal(Goal goal)
        {
            if (goal != null)
            {
                goals.Remove(goal.Priority);
            }
        }
        public int HighestPriority
        {
            get
            {
                return goals.Count > 0 ? goals.Keys[0] : -1;
            }
        }
    }
}//end namespace AliveChess//end namespace BehaviorLayer