///////////////////////////////////////////////////////////
//  CompositeGoal.cs
//  Implementation of the Class CompositeGoal
//  Generated by Enterprise Architect
//  Created on:      16-фев-2009 0:07:57
///////////////////////////////////////////////////////////

using System.Collections.Generic;

namespace AliveChessServer.LogicLayer.AI.BehaviorLayer
{
	public abstract class CompositeGoal : Goal 
    {
        private IList<Goal> subgoals = new List<Goal>();

        public CompositeGoal()
        {

        }

        public override GoalStatuses Process()
        {
            ActivateIfInactive();
            Status = this.ProcessSubGoals();
            ReactivateIfFailed();
            return Status;
        }

        public override void AddSubGoal(Goal goal)
        {
            subgoals.Add(goal);
        }

        public override void Dispose()
        {
            RemoveAllSubGoals();            
        }

		protected GoalStatuses ProcessSubGoals()
        {            
            while (subgoals.Count > 0 && (subgoals[0].IsCompleted() || subgoals[0].HasFailed()))
            {
                subgoals[0].Terminate();
                subgoals.RemoveAt(0);
            }
            if (subgoals.Count > 0)
            {
                GoalStatuses status = subgoals[0].Process();
                if (status == GoalStatuses.Completed && subgoals.Count > 0)
                {
                    return GoalStatuses.Active;
                }
                return status;
            }
            else
            {
                return GoalStatuses.Completed;
            }
		}
		public void RemoveAllSubGoals()
        {
            foreach (var goal in subgoals)
            {
                goal.Terminate();
            }
            subgoals.Clear();
		}

        public override void Activate()
        {
            Status = GoalStatuses.Active;
            RemoveAllSubGoals();
        }        
    }//end CompositeGoal

}//end namespace BehaviorLayer