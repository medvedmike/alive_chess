Изменения:

4.03.09 Роман И Вадим:
	загружен первый прототип клиента. перемещение объекта по карте с препятствиями методом
	point-and-click.
	
11.03.09 Вадим:
  Модуль битвы запускается и даже сделан выход из него, синхронизация потоков исправлена! Правда пока можно туда опять попасть туда сразу после выхода, если паучок застрял или находится рядом.
	
14.03.09 Вадим:
  Сделал загрузку карты по сети, правда пока она грузится и пишется в консоль. Нужно, чтобы карта в клиенте генерилась на основе этих данных!

15.03.09 Роман:
	Итак, понемногу готовимся к переходу на транспорт. В клиенте все изображения вынесены в ImagesUtil, слои и спрайты начинаю выносить в SpriteLoader (класс загружает с сервера численные значения, подгружает графику из ImagesUtil и создает слой). Класс FieldLoader строит экземпляры Field, используя слои карты из SpriteLoader. Канва использует FieldLoader и SpriteLoader.

Постепенно GameDesign останется только в качестве редактора карт, а результат редактирования будем переносить в вышеназванные классы.

мой ближайший todo список:
	переписать fieldloader под транспорт.
Разбить стратегическую карту на сектора и сделать загрузку сектора.
Field fieldloader.getStrategyFieldSector(int x, int y)
Использовать fieldloader.hashmap({x,y} -> field) для уже загруженных секторов карты. Строить слои на лету из эл-тов хэш-таблицы: 
TiledLayer BuildLayer(FieldSector)

	создать класс LayerCache. содержит сектор, в котором находится герой и 8 соседних секторов. при движении героя в экземпляр класса загружаются новые слои и выгружаются те, от которых герой удаляется.

При создании одного .png со всеми видами местности становится возможным хранить tiles[][], необходимые для создания tiledlayer, прямо внутри field(в виде terrain ячейки поля). Таким образом, все загруженные с сервера данные о местности хранятся в хэш-таблице. Актуальные для отрисовки слои строятся на их основе и передаются LayerCache. экземпляр этого класса используется канвой.

17.03.09 Роман:
	в /misc добавлен редактор карт. см.ридми там же.

13.04.09 Роман:
	Сейчас используем хардкод для размера клетки(пикселей) и размера сектора поля(клеток) - это не есть хорошо.
	Дописываю и отлаживаю LayerCache. много проблем со скроллингом карты.
	
15.04.09 Вадим:
  Определил интерфейс команд. Скорее всего, на каждое действие будет 2 вида команд  -- запрос и ответ сервера (Request и Response). У них будет единый интерфейс -- void execute(); , за счет этого не нужны будут ветвления instanceof или проверка типа команды по Int-полю (что по сути одно и то же). Вызываться будет перегруженная версия этого метода. Внутри execute() будут обращения к WorldContext, транспорту (все сделаем синглтонами для прозрачного доступа к ним и чтобы их было по 1 на приложение). Написал простейший пример(update worldcontext, см. код). Ах да, класс Data будет оберткой для всей передачи по сети (другого выхода пока не вижу). Вроде все!
14.05.09 Вадим:
  Добавил команд (наследуются от Request и Response), очередь для записи Request в сокет (все работает на самодельном простейшем сервере). У Request будет байтовое представление, команды вида Response придется создавать вручную из потока байт. Пока в пакете Commands каша, т.к. еще была идея с типом команд -- World, Battle и т.д. Разгребу скоро.